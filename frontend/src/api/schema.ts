/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/clients': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List Clients
     * @description List all clients in the workspace.
     *
     *     Returns a paginated list of clients, ordered by last name, first name.
     *     All results are scoped to the authenticated workspace.
     *
     *     SECURITY: Only returns clients belonging to the authenticated workspace.
     *
     *     Args:
     *         page: Page number (1-indexed)
     *         page_size: Number of items per page (max 100)
     *         db: Database session
     *         workspace_id: Authenticated workspace ID (from auth dependency)
     *
     *     Returns:
     *         Paginated list of clients with total count
     *
     *     Raises:
     *         HTTPException: 401 if not authenticated
     */
    get: operations['list_clients_api_v1_clients_get']
    put?: never
    /**
     * Create Client
     * @description Create a new client.
     *
     *     Creates a new client record in the authenticated workspace.
     *     All client data is scoped to the workspace.
     *
     *     SECURITY: workspace_id is injected from authentication, not from request body.
     *
     *     Args:
     *         client_data: Client creation data (without workspace_id)
     *         db: Database session
     *         workspace_id: Authenticated workspace ID (from auth dependency)
     *
     *     Returns:
     *         Created client with all fields
     *
     *     Raises:
     *         HTTPException: 401 if not authenticated, 422 if validation fails
     */
    post: operations['create_client_api_v1_clients_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/clients/{client_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Client
     * @description Get a single client by ID.
     *
     *     Retrieves a client by ID, ensuring it belongs to the authenticated workspace.
     *
     *     SECURITY: Returns 404 for both non-existent clients and clients in other workspaces
     *     to prevent information leakage.
     *
     *     Args:
     *         client_id: UUID of the client
     *         db: Database session
     *         workspace_id: Authenticated workspace ID (from auth dependency)
     *
     *     Returns:
     *         Client details
     *
     *     Raises:
     *         HTTPException: 401 if not authenticated, 404 if not found or wrong workspace
     */
    get: operations['get_client_api_v1_clients__client_id__get']
    /**
     * Update Client
     * @description Update an existing client.
     *
     *     Updates client fields. Only provided fields are updated.
     *     Client must belong to the authenticated workspace.
     *
     *     SECURITY: Verifies workspace ownership before allowing updates.
     *
     *     Args:
     *         client_id: UUID of the client to update
     *         client_data: Fields to update
     *         db: Database session
     *         workspace_id: Authenticated workspace ID (from auth dependency)
     *
     *     Returns:
     *         Updated client
     *
     *     Raises:
     *         HTTPException: 401 if not authenticated, 404 if not found or wrong workspace,
     *             422 if validation fails
     */
    put: operations['update_client_api_v1_clients__client_id__put']
    post?: never
    /**
     * Delete Client
     * @description Delete a client.
     *
     *     Permanently deletes a client and all associated data (appointments, sessions, etc.)
     *     due to CASCADE delete. Client must belong to the authenticated workspace.
     *
     *     SECURITY: Verifies workspace ownership before allowing deletion.
     *
     *     Args:
     *         client_id: UUID of the client to delete
     *         db: Database session
     *         workspace_id: Authenticated workspace ID (from auth dependency)
     *
     *     Returns:
     *         No content (204) on success
     *
     *     Raises:
     *         HTTPException: 401 if not authenticated, 404 if not found or wrong workspace
     */
    delete: operations['delete_client_api_v1_clients__client_id__delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/appointments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List Appointments
     * @description List appointments in the workspace with optional filters.
     *
     *     Returns a paginated list of appointments, ordered by scheduled_start descending.
     *     All results are scoped to the authenticated workspace.
     *
     *     SECURITY: Only returns appointments belonging to the authenticated workspace.
     *
     *     Args:
     *         page: Page number (1-indexed)
     *         page_size: Number of items per page (max 100)
     *         start_date: Filter appointments starting on or after this date
     *         end_date: Filter appointments starting on or before this date
     *         client_id: Filter by specific client
     *         status: Filter by appointment status
     *         db: Database session
     *         workspace_id: Authenticated workspace ID (from auth dependency)
     *
     *     Returns:
     *         Paginated list of appointments with client information
     *
     *     Raises:
     *         HTTPException: 401 if not authenticated
     */
    get: operations['list_appointments_api_v1_appointments_get']
    put?: never
    /**
     * Create Appointment
     * @description Create a new appointment with conflict detection.
     *
     *     Creates a new appointment after verifying:
     *     1. Client belongs to the workspace
     *     2. No conflicting appointments exist in the time slot
     *
     *     SECURITY: workspace_id is injected from authentication, not from request body.
     *
     *     Args:
     *         appointment_data: Appointment creation data (without workspace_id)
     *         db: Database session
     *         workspace_id: Authenticated workspace ID (from auth dependency)
     *
     *     Returns:
     *         Created appointment with client information
     *
     *     Raises:
     *         HTTPException: 401 if not authenticated, 404 if client not found,
     *             409 if conflict exists, 422 if validation fails
     */
    post: operations['create_appointment_api_v1_appointments_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/appointments/conflicts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Check Appointment Conflicts
     * @description Check for appointment conflicts in a time range.
     *
     *     Used by frontend to validate appointment times before submission.
     *
     *     SECURITY: Only checks conflicts within the authenticated workspace.
     *
     *     Args:
     *         scheduled_start: Start time to check
     *         scheduled_end: End time to check
     *         exclude_appointment_id: Appointment to exclude (when updating)
     *         db: Database session
     *         workspace_id: Authenticated workspace ID (from auth dependency)
     *
     *     Returns:
     *         Conflict check result with list of conflicting appointments
     *
     *     Raises:
     *         HTTPException: 401 if not authenticated,
     *             422 if scheduled_end is not after scheduled_start
     */
    get: operations['check_appointment_conflicts_api_v1_appointments_conflicts_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/appointments/{appointment_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Appointment
     * @description Get a single appointment by ID.
     *
     *     Retrieves an appointment by ID, ensuring it belongs to the authenticated workspace.
     *
     *     SECURITY: Returns 404 for both non-existent appointments and appointments
     *     in other workspaces to prevent information leakage.
     *
     *     Args:
     *         appointment_id: UUID of the appointment
     *         db: Database session
     *         workspace_id: Authenticated workspace ID (from auth dependency)
     *
     *     Returns:
     *         Appointment details with client information
     *
     *     Raises:
     *         HTTPException: 401 if not authenticated,
     *             404 if not found or wrong workspace
     */
    get: operations['get_appointment_api_v1_appointments__appointment_id__get']
    /**
     * Update Appointment
     * @description Update an existing appointment with conflict detection.
     *
     *     Updates appointment fields. Only provided fields are updated.
     *     If time is changed, conflict detection is performed.
     *     Appointment must belong to the authenticated workspace.
     *
     *     SECURITY: Verifies workspace ownership before allowing updates.
     *
     *     Args:
     *         appointment_id: UUID of the appointment to update
     *         appointment_data: Fields to update
     *         db: Database session
     *         workspace_id: Authenticated workspace ID (from auth dependency)
     *
     *     Returns:
     *         Updated appointment with client information
     *
     *     Raises:
     *         HTTPException: 401 if not authenticated, 404 if not found or wrong workspace,
     *             409 if conflict, 422 if validation fails
     */
    put: operations['update_appointment_api_v1_appointments__appointment_id__put']
    post?: never
    /**
     * Delete Appointment
     * @description Delete an appointment.
     *
     *     Permanently deletes an appointment and associated data (sessions, etc.)
     *     due to CASCADE delete. Appointment must belong to the authenticated workspace.
     *
     *     SECURITY: Verifies workspace ownership before allowing deletion.
     *
     *     Args:
     *         appointment_id: UUID of the appointment to delete
     *         db: Database session
     *         workspace_id: Authenticated workspace ID (from auth dependency)
     *
     *     Returns:
     *         No content (204) on success
     *
     *     Raises:
     *         HTTPException: 401 if not authenticated,
     *             404 if not found or wrong workspace
     */
    delete: operations['delete_appointment_api_v1_appointments__appointment_id__delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/health': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Health Check
     * @description Health check endpoint.
     */
    get: operations['health_check_health_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/health': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Api Health Check
     * @description API v1 health check endpoint.
     */
    get: operations['api_health_check_api_v1_health_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /**
     * AppointmentCreate
     * @description Schema for creating a new appointment.
     *
     *     SECURITY: workspace_id is NOT accepted from client requests.
     *     It is automatically injected from the authenticated user's session.
     *     This prevents workspace injection vulnerabilities.
     */
    AppointmentCreate: {
      /**
       * Client Id
       * Format: uuid
       * @description ID of the client for this appointment
       */
      client_id: string
      /**
       * Scheduled Start
       * Format: date-time
       * @description Start time (timezone-aware UTC)
       */
      scheduled_start: string
      /**
       * Scheduled End
       * Format: date-time
       * @description End time (timezone-aware UTC)
       */
      scheduled_end: string
      /** @description Type of location (clinic/home/online) */
      location_type: components['schemas']['LocationType']
      /**
       * Location Details
       * @description Additional location details
       */
      location_details?: string | null
      /**
       * Notes
       * @description Therapist notes for the appointment
       */
      notes?: string | null
    }
    /**
     * AppointmentListResponse
     * @description Schema for paginated appointment list response.
     */
    AppointmentListResponse: {
      /** Items */
      items: components['schemas']['AppointmentResponse'][]
      /** Total */
      total: number
      /** Page */
      page: number
      /** Page Size */
      page_size: number
      /** Total Pages */
      total_pages: number
    }
    /**
     * AppointmentResponse
     * @description Schema for appointment API responses.
     */
    AppointmentResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /**
       * Workspace Id
       * Format: uuid
       */
      workspace_id: string
      /**
       * Client Id
       * Format: uuid
       */
      client_id: string
      /**
       * Scheduled Start
       * Format: date-time
       */
      scheduled_start: string
      /**
       * Scheduled End
       * Format: date-time
       */
      scheduled_end: string
      location_type: components['schemas']['LocationType']
      /** Location Details */
      location_details: string | null
      status: components['schemas']['AppointmentStatus']
      /** Notes */
      notes: string | null
      /**
       * Created At
       * Format: date-time
       */
      created_at: string
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string
      /** @description Client information (included when requested) */
      client?: components['schemas']['ClientSummary'] | null
    }
    /**
     * AppointmentStatus
     * @description Status of an appointment.
     * @enum {string}
     */
    AppointmentStatus: 'scheduled' | 'attended' | 'cancelled' | 'no_show'
    /**
     * AppointmentUpdate
     * @description Schema for updating an existing appointment.
     */
    AppointmentUpdate: {
      /**
       * Client Id
       * @description ID of the client for this appointment
       */
      client_id?: string | null
      /**
       * Scheduled Start
       * @description Start time (timezone-aware UTC)
       */
      scheduled_start?: string | null
      /**
       * Scheduled End
       * @description End time (timezone-aware UTC)
       */
      scheduled_end?: string | null
      /** @description Type of location */
      location_type?: components['schemas']['LocationType'] | null
      /**
       * Location Details
       * @description Additional location details
       */
      location_details?: string | null
      /** @description Appointment status */
      status?: components['schemas']['AppointmentStatus'] | null
      /**
       * Notes
       * @description Therapist notes
       */
      notes?: string | null
    }
    /**
     * ClientCreate
     * @description Schema for creating a new client.
     *
     *     SECURITY: workspace_id is NOT accepted from client requests.
     *     It is automatically injected from the authenticated user's session.
     *     This prevents workspace injection vulnerabilities.
     */
    ClientCreate: {
      /**
       * First Name
       * @description Client's first name
       */
      first_name: string
      /**
       * Last Name
       * @description Client's last name
       */
      last_name: string
      /**
       * Email
       * @description Client's email address
       */
      email?: string | null
      /**
       * Phone
       * @description Client's phone number
       */
      phone?: string | null
      /**
       * Date Of Birth
       * @description Client's date of birth
       */
      date_of_birth?: string | null
      /**
       * Consent Status
       * @description Client consent to store and process data
       * @default false
       */
      consent_status: boolean
      /**
       * Notes
       * @description General notes about the client
       */
      notes?: string | null
      /**
       * Tags
       * @description Tags for categorization and filtering
       */
      tags?: string[] | null
    }
    /**
     * ClientListResponse
     * @description Schema for paginated client list response.
     */
    ClientListResponse: {
      /** Items */
      items: components['schemas']['ClientResponse'][]
      /** Total */
      total: number
      /** Page */
      page: number
      /** Page Size */
      page_size: number
      /** Total Pages */
      total_pages: number
    }
    /**
     * ClientResponse
     * @description Schema for client API responses.
     */
    ClientResponse: {
      /**
       * First Name
       * @description Client's first name
       */
      first_name: string
      /**
       * Last Name
       * @description Client's last name
       */
      last_name: string
      /**
       * Email
       * @description Client's email address
       */
      email?: string | null
      /**
       * Phone
       * @description Client's phone number
       */
      phone?: string | null
      /**
       * Date Of Birth
       * @description Client's date of birth
       */
      date_of_birth?: string | null
      /**
       * Consent Status
       * @description Client consent to store and process data
       * @default false
       */
      consent_status: boolean
      /**
       * Notes
       * @description General notes about the client
       */
      notes?: string | null
      /**
       * Tags
       * @description Tags for categorization and filtering
       */
      tags?: string[] | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      /**
       * Workspace Id
       * Format: uuid
       */
      workspace_id: string
      /**
       * Created At
       * Format: date-time
       */
      created_at: string
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string
    }
    /**
     * ClientSummary
     * @description Summary of client information for appointment responses.
     */
    ClientSummary: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** First Name */
      first_name: string
      /** Last Name */
      last_name: string
      /** Full Name */
      full_name: string
    }
    /**
     * ClientUpdate
     * @description Schema for updating an existing client.
     */
    ClientUpdate: {
      /** First Name */
      first_name?: string | null
      /** Last Name */
      last_name?: string | null
      /** Email */
      email?: string | null
      /** Phone */
      phone?: string | null
      /** Date Of Birth */
      date_of_birth?: string | null
      /** Consent Status */
      consent_status?: boolean | null
      /** Notes */
      notes?: string | null
      /** Tags */
      tags?: string[] | null
    }
    /**
     * ConflictCheckResponse
     * @description Schema for conflict check response.
     */
    ConflictCheckResponse: {
      /**
       * Has Conflict
       * @description Whether a conflict exists
       */
      has_conflict: boolean
      /**
       * Conflicting Appointments
       * @description List of conflicting appointments
       */
      conflicting_appointments?: components['schemas']['AppointmentResponse'][]
    }
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][]
    }
    /**
     * LocationType
     * @description Type of location for an appointment.
     * @enum {string}
     */
    LocationType: 'clinic' | 'home' | 'online'
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  list_clients_api_v1_clients_get: {
    parameters: {
      query?: {
        /** @description Page number (1-indexed) */
        page?: number
        /** @description Items per page */
        page_size?: number
      }
      header?: {
        'X-Workspace-ID'?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ClientListResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  create_client_api_v1_clients_post: {
    parameters: {
      query?: never
      header?: {
        'X-Workspace-ID'?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ClientCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ClientResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_client_api_v1_clients__client_id__get: {
    parameters: {
      query?: never
      header?: {
        'X-Workspace-ID'?: string | null
      }
      path: {
        client_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ClientResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  update_client_api_v1_clients__client_id__put: {
    parameters: {
      query?: never
      header?: {
        'X-Workspace-ID'?: string | null
      }
      path: {
        client_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ClientUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ClientResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  delete_client_api_v1_clients__client_id__delete: {
    parameters: {
      query?: never
      header?: {
        'X-Workspace-ID'?: string | null
      }
      path: {
        client_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  list_appointments_api_v1_appointments_get: {
    parameters: {
      query?: {
        /** @description Page number (1-indexed) */
        page?: number
        /** @description Items per page */
        page_size?: number
        /** @description Filter by start date (inclusive) */
        start_date?: string | null
        /** @description Filter by end date (inclusive) */
        end_date?: string | null
        /** @description Filter by client ID */
        client_id?: string | null
        /** @description Filter by status */
        status?: components['schemas']['AppointmentStatus'] | null
      }
      header?: {
        'X-Workspace-ID'?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentListResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  create_appointment_api_v1_appointments_post: {
    parameters: {
      query?: never
      header?: {
        'X-Workspace-ID'?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  check_appointment_conflicts_api_v1_appointments_conflicts_get: {
    parameters: {
      query: {
        /** @description Start time to check */
        scheduled_start: string
        /** @description End time to check */
        scheduled_end: string
        /** @description Appointment ID to exclude (for updates) */
        exclude_appointment_id?: string | null
      }
      header?: {
        'X-Workspace-ID'?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ConflictCheckResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_appointment_api_v1_appointments__appointment_id__get: {
    parameters: {
      query?: never
      header?: {
        'X-Workspace-ID'?: string | null
      }
      path: {
        appointment_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  update_appointment_api_v1_appointments__appointment_id__put: {
    parameters: {
      query?: never
      header?: {
        'X-Workspace-ID'?: string | null
      }
      path: {
        appointment_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  delete_appointment_api_v1_appointments__appointment_id__delete: {
    parameters: {
      query?: never
      header?: {
        'X-Workspace-ID'?: string | null
      }
      path: {
        appointment_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  health_check_health_get: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  api_health_check_api_v1_health_get: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
}
