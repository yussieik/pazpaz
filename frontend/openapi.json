{
  "openapi": "3.1.0",
  "info": { "title": "PazPaz", "version": "0.1.0" },
  "paths": {
    "/api/v1/auth/magic-link": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Request magic link",
        "description": "Request a magic link to be sent to the provided email address.\n\n    Security features:\n    - Rate limited to 3 requests per hour per IP address\n    - Rate limited to 5 requests per hour per email address (prevents email bombing)\n    - Returns generic success message to prevent email enumeration\n    - Tokens are 256-bit entropy with 10-minute expiry\n    - Single-use tokens (deleted after verification)\n\n    If an active user exists with the email, they will receive a login link.\n    Otherwise, no email is sent but the same success message is returned.",
        "operationId": "request_magic_link_endpoint_api_v1_auth_magic_link_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MagicLinkRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MagicLinkResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/verify": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Verify magic link token",
        "description": "Verify a magic link token and receive a JWT access token.\n\n    Security features:\n    - Token MUST be sent in POST body, not URL query parameter (CWE-598 mitigation)\n    - Rate limited to 10 verification attempts per 5 minutes per IP (brute force protection)\n    - Single-use tokens (deleted after successful verification)\n    - User existence revalidated in database\n    - JWT contains user_id and workspace_id for authorization\n    - JWT stored in HttpOnly cookie for XSS protection\n    - 7-day JWT expiry\n    - Uses POST method to prevent CSRF attacks (state-changing operation)\n    - Audit logging for all verification attempts\n    - Referrer-Policy prevents token leakage via referrer headers\n\n    Frontend MUST remove token from URL immediately after reading:\n    window.history.replaceState({}, document.title, '/auth/verify')\n\n    The token parameter is received from the email link and sent in request body.\n    On success, a JWT is set as an HttpOnly cookie and returned in response.",
        "operationId": "verify_magic_link_endpoint_api_v1_auth_verify_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TokenVerifyRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TokenVerifyResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/verify-2fa": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Complete authentication with 2FA after magic link",
        "description": "Complete authentication after magic link when 2FA is enabled.\n\n    Security features:\n    - Temporary token expires in 5 minutes\n    - Validates TOTP code or backup code\n    - Single-use backup codes\n    - Audit logging for 2FA verification\n    - Issues JWT on successful verification\n\n    Flow:\n    1. User clicks magic link\n    2. /verify returns requires_2fa=True with temp_token\n    3. User enters TOTP code from authenticator\n    4. /verify-2fa validates code and issues JWT\n\n    Args:\n        temp_token: Temporary token from /verify response\n        totp_code: 6-digit TOTP code or 8-character backup code",
        "operationId": "verify_magic_link_2fa_endpoint_api_v1_auth_verify_2fa_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MagicLink2FARequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MagicLink2FAResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/accept-invite": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Accept therapist invitation",
        "description": "Accept therapist invitation and activate account via magic link.\n\n    Security features:\n    - Single-use invitation tokens (7-day expiration)\n    - Token verification uses timing-safe comparison (SHA256)\n    - Activates user account and creates session\n    - HttpOnly cookies for XSS protection\n    - Audit logging for invitation acceptance\n    - Generic error messages (no token leakage)\n\n    Flow:\n    1. Therapist clicks invitation link in email\n    2. Token verified and user activated\n    3. JWT session created and cookies set\n    4. Redirect to app (logged in)\n\n    Error handling:\n    - Invalid/expired tokens redirect to /login with error parameter\n    - Already accepted redirects to /login with info message\n    - All errors are logged server-side for security monitoring",
        "operationId": "accept_invitation_api_v1_auth_accept_invite_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Invitation token from email",
              "title": "Token"
            },
            "description": "Invitation token from email"
          }
        ],
        "responses": {
          "303": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/me": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Get current user",
        "description": "Get information about the currently authenticated user.\n\n    Security features:\n    - Requires valid JWT authentication (HttpOnly cookie)\n    - Returns user information from validated session\n    - Used by frontend to check authentication status\n\n    This endpoint is typically called:\n    - On app startup to restore authentication state\n    - After login to verify successful authentication\n    - To check if session is still valid\n\n    Returns 401 Unauthorized if not authenticated or session expired.",
        "operationId": "get_current_user_endpoint_api_v1_auth_me_get",
        "parameters": [
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserInToken" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Logout",
        "description": "Logout by clearing the JWT cookie and blacklisting the token.\n\n    Security features:\n    - Clears HttpOnly authentication cookie\n    - Blacklists JWT token in Redis (prevents reuse)\n    - Clears CSRF token cookie\n    - Requires CSRF token for protection against logout CSRF attacks\n    - Audit logging for logout events\n\n    The blacklisted token cannot be used even if stolen, providing\n    enhanced security compared to client-side-only logout.",
        "operationId": "logout_endpoint_api_v1_auth_logout_post",
        "parameters": [
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LogoutResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/totp/enroll": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Enroll in 2FA/TOTP",
        "description": "Enroll current authenticated user in 2FA/TOTP.\n\n    Security features:\n    - TOTP secret generated with 160 bits entropy\n    - Secret stored encrypted with AES-256-GCM\n    - QR code generated for easy authenticator app setup\n    - 8 backup codes generated and hashed with Argon2id\n    - Not enabled until user verifies with /totp/verify\n    - Requires existing authentication (JWT)\n\n    Returns:\n    - TOTP secret (base32-encoded, for manual entry)\n    - QR code (data URI, for scanning)\n    - 8 backup codes (shown ONLY ONCE, save offline)\n\n    User must verify TOTP code with /totp/verify before 2FA is enabled.",
        "operationId": "enroll_user_totp_api_v1_auth_totp_enroll_post",
        "parameters": [
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TOTPEnrollResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/totp/verify": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Verify TOTP code and enable 2FA",
        "description": "Verify TOTP code and enable 2FA for current user.\n\n    Security features:\n    - Must be called after /totp/enroll\n    - Validates 6-digit TOTP code from authenticator app\n    - Window of ±30 seconds for clock skew tolerance\n    - Sets enrollment timestamp\n    - Audit logging for successful enrollment\n    - Requires existing authentication (JWT)\n\n    After successful verification, 2FA is enabled and will be required\n    on all future magic link authentications.",
        "operationId": "verify_user_totp_api_v1_auth_totp_verify_post",
        "parameters": [
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TOTPVerifyRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TOTPVerifyResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/session/refresh": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Refresh user session",
        "description": "Refresh user session to extend JWT expiry.\n\n    Security features:\n    - HIPAA compliance for session timeout warnings (§164.312(a)(2)(iii))\n    - Extends JWT expiry by resetting activity timestamp\n    - Prevents data loss from silent session expiration\n    - Used by frontend session timeout warning modal\n\n    This endpoint:\n    - Validates current JWT authentication\n    - Updates session activity timestamp\n    - Returns success response (JWT automatically refreshed via dependency)\n    - Frontend should call this when user clicks \"Stay logged in\" button\n\n    Returns 401 Unauthorized if session already expired.",
        "operationId": "refresh_session_endpoint_api_v1_auth_session_refresh_post",
        "parameters": [
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Refresh Session Endpoint Api V1 Auth Session Refresh Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/totp": {
      "delete": {
        "tags": ["Authentication"],
        "summary": "Disable 2FA",
        "description": "Disable 2FA for current authenticated user.\n\n    SECURITY: Requires TOTP verification before disabling.\n    This prevents attackers with stolen sessions from disabling 2FA.\n\n    Security considerations:\n    - Removes all TOTP data (secret, backup codes, timestamp)\n    - Requires valid TOTP code verification before disabling\n    - Audit logging for 2FA disable (both success and failure)\n    - Requires existing authentication (JWT)\n\n    WARNING: After disabling, user will only have magic link authentication.",
        "operationId": "disable_user_totp_api_v1_auth_totp_delete",
        "parameters": [
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TOTPDisableRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Disable User Totp Api V1 Auth Totp Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/platform-admin/invite-therapist": {
      "post": {
        "tags": ["platform-admin"],
        "summary": "Invite a new therapist",
        "description": "Create a new workspace and invite a therapist to join the platform.\n\n    Security:\n    - Requires platform admin authentication\n    - Email uniqueness enforced (400 if duplicate)\n    - Invitation token SHA256 hashed in database\n    - Token expires in 7 days\n    - Audit logging for all invitations\n\n    Flow:\n    1. Platform admin provides workspace name, therapist email, and full name\n    2. System creates workspace and inactive user account\n    3. System generates invitation token (256-bit entropy)\n    4. Platform admin receives invitation URL to send via email\n    5. Therapist clicks link and accepts invitation to activate account\n\n    Error Responses:\n    - 400: Email already exists (duplicate)\n    - 401: Not authenticated\n    - 403: Not platform admin\n    - 422: Validation error (invalid email, empty fields)",
        "operationId": "invite_therapist_api_v1_platform_admin_invite_therapist_post",
        "parameters": [
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InviteTherapistRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InviteTherapistResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/platform-admin/resend-invitation/{user_id}": {
      "post": {
        "tags": ["platform-admin"],
        "summary": "Resend invitation to pending user",
        "description": "Generate a new invitation token for a user who has not yet accepted\n    their invitation.\n\n    Security:\n    - Requires platform admin authentication\n    - Only works for inactive users (is_active=False)\n    - Old token is invalidated (replaced with new one)\n    - New 7-day expiration window\n    - Audit logging for resends\n\n    Use Cases:\n    - Original invitation expired (>7 days)\n    - Therapist lost invitation email\n    - Invitation token compromised\n\n    Error Responses:\n    - 400: User is already active (invitation already accepted)\n    - 401: Not authenticated\n    - 403: Not platform admin\n    - 404: User not found\n    - 422: Invalid UUID format",
        "operationId": "resend_invitation_api_v1_platform_admin_resend_invitation__user_id__post",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResendInvitationResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/platform-admin/pending-invitations": {
      "get": {
        "tags": ["platform-admin"],
        "summary": "List all pending invitations",
        "description": "Get a list of all users who have been invited but have not yet accepted\n    their invitation.\n\n    Security:\n    - Requires platform admin authentication\n    - Returns only inactive users (is_active=False)\n    - Includes expiration status (calculated from invited_at + 7 days)\n    - Sorted by invited_at (newest first)\n\n    Response includes:\n    - user_id: UUID of the user\n    - email: Email address\n    - full_name: Full name\n    - workspace_name: Name of workspace user will join\n    - invited_at: When invitation was sent (UTC)\n    - expires_at: When invitation expires (UTC)\n\n    Use Cases:\n    - Monitor pending onboarding\n    - Identify expired invitations for cleanup\n    - Follow up with therapists who haven't accepted\n\n    Error Responses:\n    - 401: Not authenticated\n    - 403: Not platform admin",
        "operationId": "get_pending_invitations_api_v1_platform_admin_pending_invitations_get",
        "parameters": [
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PendingInvitationsResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients": {
      "post": {
        "tags": ["clients"],
        "summary": "Create Client",
        "description": "Create a new client.\n\nCreates a new client record in the authenticated workspace.\nAll client data is scoped to the workspace.\n\nSECURITY: workspace_id is derived from authenticated user's JWT token (server-side).\n\nArgs:\n    client_data: Client creation data (without workspace_id)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Created client with all fields\n\nRaises:\n    HTTPException: 401 if not authenticated, 422 if validation fails",
        "operationId": "create_client_api_v1_clients_post",
        "parameters": [
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ClientCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ClientResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["clients"],
        "summary": "List Clients",
        "description": "List all clients in the workspace.\n\nReturns a paginated list of clients, ordered by last name, first name.\nAll results are scoped to the authenticated workspace.\n\nBy default, only active clients are returned. Use include_inactive=true\nto see archived clients as well.\n\nSECURITY: Only returns clients belonging to the authenticated user's\nworkspace (from JWT).\n\nArgs:\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n    page: Page number (1-indexed)\n    page_size: Number of items per page (max 100)\n    include_inactive: If True, include archived/inactive clients\n    include_appointments: If True, include appointment stats\n        (adds 3 queries per client)\n\nReturns:\n    Paginated list of clients with total count\n\nRaises:\n    HTTPException: 401 if not authenticated",
        "operationId": "list_clients_api_v1_clients_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number (1-indexed)",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number (1-indexed)"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 50,
              "title": "Page Size"
            },
            "description": "Items per page"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include archived/inactive clients",
              "default": false,
              "title": "Include Inactive"
            },
            "description": "Include archived/inactive clients"
          },
          {
            "name": "include_appointments",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include appointment stats (slower)",
              "default": false,
              "title": "Include Appointments"
            },
            "description": "Include appointment stats (slower)"
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ClientListResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients/{client_id}": {
      "get": {
        "tags": ["clients"],
        "summary": "Get Client",
        "description": "Get a single client by ID with computed appointment fields.\n\nRetrieves a client by ID, ensuring it belongs to the authenticated workspace.\nIncludes computed fields: next_appointment, last_appointment, appointment_count.\n\nSECURITY: Returns 404 for both non-existent clients and clients in other\nworkspaces to prevent information leakage. workspace_id is derived from\nJWT token (server-side).\n\nPHI ACCESS: This endpoint accesses Protected Health Information (PHI).\nAll access is automatically logged by AuditMiddleware for HIPAA compliance.\n\nArgs:\n    client_id: UUID of the client\n    request: FastAPI request object\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Client details with computed appointment fields\n\nRaises:\n    HTTPException: 401 if not authenticated, 404 if not found or wrong workspace",
        "operationId": "get_client_api_v1_clients__client_id__get",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Client Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ClientResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["clients"],
        "summary": "Update Client",
        "description": "Update an existing client.\n\nUpdates client fields. Only provided fields are updated.\nClient must belong to the authenticated workspace.\n\nSECURITY: Verifies workspace ownership before allowing updates.\nworkspace_id is derived from JWT token (server-side).\n\nArgs:\n    client_id: UUID of the client to update\n    client_data: Fields to update\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Updated client with computed appointment fields\n\nRaises:\n    HTTPException: 401 if not authenticated, 404 if not found or wrong workspace,\n        422 if validation fails",
        "operationId": "update_client_api_v1_clients__client_id__put",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Client Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ClientUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ClientResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["clients"],
        "summary": "Delete Client",
        "description": "Soft delete a client by marking as inactive.\n\nCHANGED: This now performs a soft delete (is_active = false) instead of\nhard delete to preserve audit trail and appointment history.\n\nClient must belong to the authenticated workspace. The client will no longer\nappear in default list views but can be retrieved with include_inactive=true.\n\nSECURITY: Verifies workspace ownership before allowing deletion.\nworkspace_id is derived from JWT token (server-side).\n\nArgs:\n    client_id: UUID of the client to delete\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    No content (204) on success\n\nRaises:\n    HTTPException: 401 if not authenticated, 404 if not found or wrong workspace",
        "operationId": "delete_client_api_v1_clients__client_id__delete",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Client Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/appointments": {
      "post": {
        "tags": ["appointments"],
        "summary": "Create Appointment",
        "description": "Create a new appointment with conflict detection.\n\nCreates a new appointment after verifying:\n1. Client belongs to the workspace\n2. No conflicting appointments exist in the time slot\n\nSECURITY: workspace_id is derived from authenticated user's JWT token (server-side).\n\nArgs:\n    appointment_data: Appointment creation data (without workspace_id)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Created appointment with client information\n\nRaises:\n    HTTPException: 401 if not authenticated, 404 if client not found,\n        409 if conflict exists, 422 if validation fails",
        "operationId": "create_appointment_api_v1_appointments_post",
        "parameters": [
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AppointmentCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AppointmentResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["appointments"],
        "summary": "List Appointments",
        "description": "List appointments in the workspace with optional filters.\n\nReturns a paginated list of appointments, ordered by scheduled_start descending.\nAll results are scoped to the authenticated workspace.\n\nSECURITY: Only returns appointments belonging to the authenticated user's\nworkspace (from JWT).\n\nArgs:\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n    page: Page number (1-indexed)\n    page_size: Number of items per page (max 100)\n    start_date: Filter appointments starting on or after this date\n    end_date: Filter appointments starting on or before this date\n    client_id: Filter by specific client\n    status: Filter by appointment status\n\nReturns:\n    Paginated list of appointments with client information\n\nRaises:\n    HTTPException: 401 if not authenticated",
        "operationId": "list_appointments_api_v1_appointments_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number (1-indexed)",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number (1-indexed)"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 50,
              "title": "Page Size"
            },
            "description": "Items per page"
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "description": "Filter by start date (inclusive)",
              "title": "Start Date"
            },
            "description": "Filter by start date (inclusive)"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "description": "Filter by end date (inclusive)",
              "title": "End Date"
            },
            "description": "Filter by end date (inclusive)"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string", "format": "uuid" }, { "type": "null" }],
              "description": "Filter by client ID",
              "title": "Client Id"
            },
            "description": "Filter by client ID"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/AppointmentStatus" },
                { "type": "null" }
              ],
              "description": "Filter by status",
              "title": "Status"
            },
            "description": "Filter by status"
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AppointmentListResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/appointments/conflicts": {
      "get": {
        "tags": ["appointments"],
        "summary": "Check Appointment Conflicts",
        "description": "Check for appointment conflicts in a time range.\n\nUsed by frontend to validate appointment times before submission.\n\nSECURITY: Only checks conflicts within the authenticated user's workspace\n(from JWT).\n\nArgs:\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n    scheduled_start: Start time to check\n    scheduled_end: End time to check\n    exclude_appointment_id: Appointment to exclude (when updating)\n\nReturns:\n    Conflict check result with list of conflicting appointments\n\nRaises:\n    HTTPException: 401 if not authenticated,\n        422 if scheduled_end is not after scheduled_start",
        "operationId": "check_appointment_conflicts_api_v1_appointments_conflicts_get",
        "parameters": [
          {
            "name": "scheduled_start",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Start time to check",
              "title": "Scheduled Start"
            },
            "description": "Start time to check"
          },
          {
            "name": "scheduled_end",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "End time to check",
              "title": "Scheduled End"
            },
            "description": "End time to check"
          },
          {
            "name": "exclude_appointment_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string", "format": "uuid" }, { "type": "null" }],
              "description": "Appointment ID to exclude (for updates)",
              "title": "Exclude Appointment Id"
            },
            "description": "Appointment ID to exclude (for updates)"
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConflictCheckResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/appointments/{appointment_id}": {
      "get": {
        "tags": ["appointments"],
        "summary": "Get Appointment",
        "description": "Get a single appointment by ID.\n\nRetrieves an appointment by ID, ensuring it belongs to the authenticated workspace.\n\nSECURITY: Returns 404 for both non-existent appointments and appointments\nin other workspaces to prevent information leakage. workspace_id is derived\nfrom JWT token.\n\nArgs:\n    appointment_id: UUID of the appointment\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Appointment details with client information\n\nRaises:\n    HTTPException: 401 if not authenticated,\n        404 if not found or wrong workspace",
        "operationId": "get_appointment_api_v1_appointments__appointment_id__get",
        "parameters": [
          {
            "name": "appointment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Appointment Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AppointmentResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["appointments"],
        "summary": "Update Appointment",
        "description": "Update an existing appointment with conflict detection.\n\nUpdates appointment fields. Only provided fields are updated.\nIf time is changed, conflict detection is performed unless allow_conflict=True.\nAppointment must belong to the authenticated workspace.\n\nSECURITY: Verifies workspace ownership before allowing updates.\nworkspace_id is derived from JWT token (server-side).\n\nArgs:\n    appointment_id: UUID of the appointment to update\n    appointment_data: Fields to update\n    allow_conflict: Allow update even if conflicts exist (default: False)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Updated appointment with client information\n\nRaises:\n    HTTPException: 401 if not authenticated, 404 if not found or wrong workspace,\n        409 if conflict (and allow_conflict=False), 422 if validation fails",
        "operationId": "update_appointment_api_v1_appointments__appointment_id__put",
        "parameters": [
          {
            "name": "appointment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Appointment Id" }
          },
          {
            "name": "allow_conflict",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Allow update even if conflicts exist (for 'Keep Both' scenario)",
              "default": false,
              "title": "Allow Conflict"
            },
            "description": "Allow update even if conflicts exist (for 'Keep Both' scenario)"
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AppointmentUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AppointmentResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["appointments"],
        "summary": "Delete Appointment",
        "description": "Delete an appointment with optional session note handling.\n\nPermanently deletes an appointment. If appointment has attached session notes,\nyou can choose to:\n- soft delete them (30-day grace period for restoration)\n- keep them unchanged (default)\n\nSOFT DELETE: Session notes are soft-deleted with 30-day grace period.\nAfter 30 days, they will be permanently purged by a background job.\n\nVALIDATION: Cannot delete session notes that have been amended (amendment_count > 0)\ndue to medical-legal significance.\n\nSECURITY: Verifies workspace ownership before allowing deletion.\nworkspace_id is derived from JWT token (server-side).\n\nAUDIT: Comprehensive audit logging includes:\n- Appointment status at deletion\n- Whether session note existed and action taken\n- Optional deletion reasons (appointment and session)\n- Client/service context for forensic review\n\nArgs:\n    appointment_id: UUID of the appointment to delete\n    deletion_request: Optional deletion reason and session note action\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    No content (204) on success\n\nRaises:\n    HTTPException: 401 if not authenticated,\n        404 if not found or wrong workspace,\n        422 if trying to delete amended session notes\n\nExample:\n    DELETE /api/v1/appointments/{uuid}\n    {\n      \"reason\": \"Duplicate entry - scheduled twice by mistake\",\n      \"session_note_action\": \"delete\",\n      \"deletion_reason\": \"Incorrect session data, will recreate\"\n    }",
        "operationId": "delete_appointment_api_v1_appointments__appointment_id__delete",
        "parameters": [
          {
            "name": "appointment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Appointment Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  { "$ref": "#/components/schemas/AppointmentDeleteRequest" },
                  { "type": "null" }
                ],
                "title": "Deletion Request"
              }
            }
          }
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions": {
      "post": {
        "tags": ["sessions"],
        "summary": "Create Session",
        "description": "Create a new SOAP session note.\n\nCreates a new session after verifying:\n1. Client belongs to the workspace\n2. Session date is not in the future (validated by Pydantic)\n\nSECURITY: workspace_id is derived from authenticated user's JWT token (server-side).\nAll PHI fields (subjective, objective, assessment, plan) are automatically encrypted\nat rest using AES-256-GCM via the EncryptedString type.\n\nAUDIT: Creation is automatically logged by AuditMiddleware.\n\nArgs:\n    session_data: Session creation data (without workspace_id)\n    request: FastAPI request object (for audit logging)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Created session with encrypted PHI fields\n\nRaises:\n    HTTPException: 401 if not authenticated, 404 if client not found,\n        422 if validation fails\n\nExample:\n    POST /api/v1/sessions\n    {\n        \"client_id\": \"uuid\",\n        \"session_date\": \"2025-10-08T14:30:00Z\",\n        \"subjective\": \"Patient reports...\",\n        \"objective\": \"Observations...\",\n        \"assessment\": \"Clinical assessment...\",\n        \"plan\": \"Treatment plan...\"\n    }",
        "operationId": "create_session_api_v1_sessions_post",
        "parameters": [
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SessionCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SessionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["sessions"],
        "summary": "List Sessions",
        "description": "List sessions for a client or appointment with optional full-text search.\n\nReturns a paginated list of sessions, ordered by session_date descending.\nAll results are scoped to the authenticated workspace.\n\nQuery Parameters:\n    client_id: Filter sessions by client ID (optional if appointment_id\n        provided)\n    appointment_id: Filter sessions by appointment ID (optional if\n        client_id provided)\n    page: Page number (default: 1)\n    page_size: Items per page (default: 50, max: 100)\n    is_draft: Filter by draft status (optional)\n    include_deleted: Include soft-deleted sessions (default: false)\n    search: Full-text search across SOAP fields (case-insensitive,\n        partial matching)\n\nNote: At least one of client_id or appointment_id must be provided.\n\nSECURITY: Only returns sessions belonging to the authenticated user's\nworkspace (from JWT). Requires either client_id or appointment_id filter\nto prevent accidental exposure of all sessions.\n\nSEARCH: When search parameter is provided, decrypts SOAP fields and\nperforms in-memory filtering. Limited to 1000 sessions for safety.\nSearch queries are automatically logged to audit trail for compliance.\n\nPERFORMANCE: Uses ix_sessions_workspace_client_date or\nix_sessions_workspace_appointment indexes for optimal query performance.\nSearch performance: <150ms for 100 sessions, <500ms for 500 sessions.\n\nArgs:\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n    page: Page number (1-indexed)\n    page_size: Number of items per page (max 100)\n    client_id: Filter by specific client (optional)\n    appointment_id: Filter by specific appointment (optional)\n    is_draft: Filter by draft status (optional)\n    include_deleted: Include soft-deleted sessions (default: false)\n    search: Search query string (optional)\n\nReturns:\n    Paginated list of sessions with decrypted PHI fields\n\nRaises:\n    HTTPException: 401 if not authenticated,\n        400 if neither client_id nor appointment_id provided,\n        404 if client/appointment not found in workspace,\n        422 if search query validation fails\n\nExample:\n    GET /api/v1/sessions?client_id={uuid}&page=1&page_size=50&is_draft=true\n    GET /api/v1/sessions?appointment_id={uuid}\n    GET /api/v1/sessions?client_id={uuid}&search=shoulder%20pain",
        "operationId": "list_sessions_api_v1_sessions_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number (1-indexed)",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number (1-indexed)"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 50,
              "title": "Page Size"
            },
            "description": "Items per page"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string", "format": "uuid" }, { "type": "null" }],
              "description": "Filter by client ID (optional if appointment_id provided)",
              "title": "Client Id"
            },
            "description": "Filter by client ID (optional if appointment_id provided)"
          },
          {
            "name": "appointment_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string", "format": "uuid" }, { "type": "null" }],
              "description": "Filter by appointment ID (optional if client_id provided)",
              "title": "Appointment Id"
            },
            "description": "Filter by appointment ID (optional if client_id provided)"
          },
          {
            "name": "is_draft",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "description": "Filter by draft status",
              "title": "Is Draft"
            },
            "description": "Filter by draft status"
          },
          {
            "name": "include_deleted",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include soft-deleted sessions (for restoration)",
              "default": false,
              "title": "Include Deleted"
            },
            "description": "Include soft-deleted sessions (for restoration)"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "minLength": 1, "maxLength": 200 },
                { "type": "null" }
              ],
              "description": "Search across SOAP fields (subjective, objective, assessment, plan). Case-insensitive partial matching.",
              "examples": ["shoulder pain"],
              "title": "Search"
            },
            "description": "Search across SOAP fields (subjective, objective, assessment, plan). Case-insensitive partial matching."
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SessionListResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/{session_id}": {
      "get": {
        "tags": ["sessions"],
        "summary": "Get Session",
        "description": "Get a single session by ID with decrypted SOAP fields.\n\nRetrieves a session by ID, ensuring it belongs to the authenticated workspace.\nPHI fields are automatically decrypted from database storage.\n\nSECURITY: Returns 404 for both non-existent sessions and sessions in other\nworkspaces to prevent information leakage. workspace_id is derived from JWT token.\n\nAUDIT: PHI access is manually logged via create_audit_event.\n\nArgs:\n    session_id: UUID of the session\n    request: FastAPI request object (for audit logging)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Session details with decrypted PHI fields and attachment count\n\nRaises:\n    HTTPException: 401 if not authenticated,\n        404 if not found or wrong workspace\n\nExample:\n    GET /api/v1/sessions/{uuid}",
        "operationId": "get_session_api_v1_sessions__session_id__get",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Session Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SessionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["sessions"],
        "summary": "Update Session",
        "description": "Update an existing session with partial updates.\n\nUpdates session fields. Only provided fields are updated (partial updates).\nSession must belong to the authenticated workspace.\n\nSECURITY: Verifies workspace ownership before allowing updates.\nworkspace_id is derived from JWT token (server-side).\nUpdated PHI fields are automatically encrypted at rest.\n\nOPTIMISTIC LOCKING: Uses version field to prevent concurrent update conflicts.\nVersion is automatically incremented on successful update.\n\nAUDIT: Update is automatically logged by AuditMiddleware.\n\nArgs:\n    session_id: UUID of the session to update\n    session_data: Fields to update (all optional)\n    request: FastAPI request object (for audit logging)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Updated session with decrypted PHI fields\n\nRaises:\n    HTTPException: 401 if not authenticated, 404 if not found or wrong workspace,\n        409 if version conflict (concurrent update), 422 if validation fails\n\nExample:\n    PUT /api/v1/sessions/{uuid}\n    {\n        \"subjective\": \"Updated patient report...\",\n        \"plan\": \"Updated treatment plan...\"\n    }",
        "operationId": "update_session_api_v1_sessions__session_id__put",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Session Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SessionUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SessionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["sessions"],
        "summary": "Delete Session",
        "description": "Soft delete a session with optional deletion reason.\n\nSOFT DELETE ONLY: Sets deleted_at timestamp without removing data.\nThis preserves audit trail and allows recovery if needed.\n\nSECURITY: Verifies workspace ownership before allowing deletion.\nworkspace_id is derived from JWT token (server-side).\n\nPROTECTION: Finalized sessions cannot be deleted (immutable records).\n\nAUDIT: Deletion is automatically logged by AuditMiddleware.\n\nArgs:\n    session_id: UUID of the session to delete\n    request: FastAPI request object (for audit logging)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n    deletion_request: Optional request body with deletion reason\n\nBody Parameters:\n    reason: Optional reason for deletion (max 500 chars, logged in audit trail)\n\nReturns:\n    No content (204) on success\n\nRaises:\n    HTTPException: 401 if not authenticated,\n        404 if not found, already deleted, or wrong workspace,\n        422 if session is finalized (cannot delete finalized sessions)\n\nExample:\n    DELETE /api/v1/sessions/{uuid}\n    {\n        \"reason\": \"Duplicate entry, will recreate\"\n    }",
        "operationId": "delete_session_api_v1_sessions__session_id__delete",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Session Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  { "$ref": "#/components/schemas/SessionDeleteRequest" },
                  { "type": "null" }
                ],
                "title": "Deletion Request"
              }
            }
          }
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/{session_id}/draft": {
      "patch": {
        "tags": ["sessions"],
        "summary": "Save Draft",
        "description": "Save session draft (autosave endpoint).\n\nThis endpoint is designed for frontend autosave functionality called\nevery ~5 seconds.\n\nFeatures:\n- Relaxed validation (partial/empty fields allowed - drafts don't\n  need to be complete)\n- Rate limited to 60 requests/minute per user per session\n  (allows autosave every ~1 second)\n- Updates only provided fields (partial update)\n- Auto-increments version for optimistic locking\n- Updates draft_last_saved_at timestamp\n- Preserves finalized status (amendments) or keeps is_draft = True\n\nSECURITY: Verifies workspace ownership before allowing updates.\nworkspace_id is derived from JWT token (server-side).\nRate limiting uses Redis-backed distributed sliding window algorithm.\n\nAUDIT: Update is automatically logged by AuditMiddleware.\n\nArgs:\n    session_id: UUID of the session to update\n    draft_update: Fields to update (all optional)\n    request: FastAPI request object (for audit logging)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n    redis_client: Redis client for distributed rate limiting\n\nReturns:\n    Updated session with decrypted PHI fields\n\nRaises:\n    HTTPException: 401 if not authenticated, 404 if not found or wrong workspace,\n        429 if rate limit exceeded, 422 if validation fails\n\nExample:\n    PATCH /api/v1/sessions/{uuid}/draft\n    {\n        \"subjective\": \"Patient reports... (partial update)\"\n    }",
        "operationId": "save_draft_api_v1_sessions__session_id__draft_patch",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Session Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SessionDraftUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SessionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/{session_id}/finalize": {
      "post": {
        "tags": ["sessions"],
        "summary": "Finalize Session",
        "description": "Finalize session and mark as complete.\n\nMarks a session as finalized, making it immutable and preventing deletion.\nAt least one SOAP field must have content before finalizing.\n\nValidation:\n- At least one SOAP field (subjective, objective, assessment, plan)\n  must have content\n- Session must exist and belong to the authenticated workspace\n\nEffect:\n- Sets finalized_at timestamp to current time\n- Sets is_draft to False\n- Increments version\n- Prevents deletion (enforced in DELETE endpoint)\n\nSECURITY: Verifies workspace ownership before allowing finalization.\nworkspace_id is derived from JWT token (server-side).\n\nAUDIT: Update is automatically logged by AuditMiddleware with \"finalized\" action.\n\nArgs:\n    session_id: UUID of the session to finalize\n    request: FastAPI request object (for audit logging)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Finalized session with finalized_at timestamp set\n\nRaises:\n    HTTPException: 401 if not authenticated, 404 if not found or wrong workspace,\n        422 if validation fails (no SOAP content)\n\nExample:\n    POST /api/v1/sessions/{uuid}/finalize\n    (no request body needed)",
        "operationId": "finalize_session_api_v1_sessions__session_id__finalize_post",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Session Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SessionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/{session_id}/unfinalize": {
      "post": {
        "tags": ["sessions"],
        "summary": "Unfinalize Session",
        "description": "Unfinalize session and revert to draft status.\n\nReverts a finalized session back to draft status, allowing further editing.\nThis endpoint is the inverse of POST /sessions/{session_id}/finalize.\n\nEffect:\n- Sets is_draft to True\n- Clears finalized_at timestamp (sets to NULL)\n- Increments version\n- Session becomes editable again\n\nSECURITY: Verifies workspace ownership before allowing unfinalizing.\nworkspace_id is derived from JWT token (server-side).\n\nAUDIT: Update is automatically logged by AuditMiddleware with \"unfinalized\" action.\n\nArgs:\n    session_id: UUID of the session to unfinalize\n    request: FastAPI request object (for audit logging)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Unfinalied session with is_draft=True and finalized_at cleared\n\nRaises:\n    HTTPException: 401 if not authenticated, 404 if not found or wrong workspace,\n        400 if session is already a draft\n\nExample:\n    POST /api/v1/sessions/{uuid}/unfinalize\n    (no request body needed)",
        "operationId": "unfinalize_session_api_v1_sessions__session_id__unfinalize_post",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Session Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SessionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/{session_id}/versions": {
      "get": {
        "tags": ["sessions"],
        "summary": "Get Session Versions",
        "description": "Get version history for a session note.\n\nReturns all versions of a session note in reverse chronological order\n(most recent first). Only finalized sessions have versions.\n\nSECURITY: Verifies workspace ownership before allowing access.\nworkspace_id is derived from JWT token (server-side).\n\nAUDIT: PHI access is automatically logged by AuditMiddleware.\n\nArgs:\n    session_id: UUID of the session\n    request: FastAPI request object (for audit logging)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    List of session versions with decrypted PHI fields\n\nRaises:\n    HTTPException: 401 if not authenticated,\n        404 if not found or wrong workspace\n\nExample:\n    GET /api/v1/sessions/{uuid}/versions\n    Response: [\n      {\n        \"id\": \"version-uuid-2\",\n        \"session_id\": \"session-uuid\",\n        \"version_number\": 2,\n        \"subjective\": \"Amended note...\",\n        \"created_at\": \"2025-01-16T09:15:00Z\"\n      },\n      {\n        \"id\": \"version-uuid-1\",\n        \"session_id\": \"session-uuid\",\n        \"version_number\": 1,\n        \"subjective\": \"Original note...\",\n        \"created_at\": \"2025-01-15T15:05:00Z\"\n      }\n    ]",
        "operationId": "get_session_versions_api_v1_sessions__session_id__versions_get",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Session Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SessionVersionResponse" },
                  "title": "Response Get Session Versions Api V1 Sessions  Session Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/{session_id}/restore": {
      "post": {
        "tags": ["sessions"],
        "summary": "Restore Session",
        "description": "Restore a soft-deleted session within 30-day grace period.\n\nRestores a soft-deleted session by clearing the deletion metadata.\nCan only restore sessions that haven't exceeded the 30-day grace period.\n\nSECURITY: Verifies workspace ownership before allowing restoration.\nworkspace_id is derived from JWT token (server-side).\n\nAUDIT: Restoration is logged in audit trail.\n\nArgs:\n    session_id: UUID of the session to restore\n    request: FastAPI request object (for audit logging)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Restored session with cleared deletion metadata\n\nRaises:\n    HTTPException: 401 if not authenticated,\n        404 if not found or not deleted or wrong workspace,\n        410 if 30-day grace period has expired\n\nExample:\n    POST /api/v1/sessions/{uuid}/restore\n    (no request body needed)",
        "operationId": "restore_session_api_v1_sessions__session_id__restore_post",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Session Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SessionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/{session_id}/permanent": {
      "delete": {
        "tags": ["sessions"],
        "summary": "Permanently Delete Session",
        "description": "Permanently delete a soft-deleted session (HARD DELETE).\n\nThis endpoint performs a true database deletion, permanently removing the\nsession record and all associated data. This action is irreversible.\n\nSECURITY: Verifies workspace ownership before allowing deletion.\nworkspace_id is derived from JWT token (server-side).\n\nRESTRICTIONS:\n- Can only permanently delete sessions that are already soft-deleted\n- Cannot delete active (non-deleted) sessions - use DELETE /sessions/{id} first\n\nAUDIT: Permanent deletion is logged in audit trail before record removal.\n\nArgs:\n    session_id: UUID of the session to permanently delete\n    request: FastAPI request object (for audit logging)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    No content (204) on success\n\nRaises:\n    HTTPException: 401 if not authenticated,\n        404 if not found or wrong workspace,\n        422 if session is not soft-deleted (must soft-delete first)\n\nExample:\n    DELETE /api/v1/sessions/{uuid}/permanent",
        "operationId": "permanently_delete_session_api_v1_sessions__session_id__permanent_delete",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Session Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/clients/{client_id}/latest-finalized": {
      "get": {
        "tags": ["sessions"],
        "summary": "Get Latest Finalized Session",
        "description": "Get the most recent finalized session for a client.\n\nReturns the latest finalized (non-draft) session note for the specified client,\nordered by session_date descending. Used by the Previous Session Context Panel\nto provide treatment continuity when creating new session notes.\n\nSECURITY: Verifies client belongs to authenticated workspace before returning data.\nworkspace_id is derived from JWT token (server-side).\n\nPERFORMANCE: Uses ix_sessions_workspace_client_date index for optimal performance.\nQuery should execute in <50ms p95.\n\nPHI ACCESS: This endpoint returns decrypted SOAP fields (PHI).\nAll access is automatically logged by AuditMiddleware for HIPAA compliance.\n\nArgs:\n    client_id: UUID of the client\n    request: FastAPI request object (for audit logging)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Most recent finalized session with decrypted SOAP fields\n\nRaises:\n    HTTPException: 401 if not authenticated,\n        403 if client not in workspace,\n        404 if client has no finalized sessions\n\nExample:\n    GET /api/v1/sessions/clients/{client_id}/latest-finalized\n    Response: {\n        \"id\": \"uuid\",\n        \"session_date\": \"2025-10-06T14:00:00Z\",\n        \"duration_minutes\": 60,\n        \"is_draft\": false,\n        \"finalized_at\": \"2025-10-06T15:05:00Z\",\n        \"subjective\": \"Patient reports neck pain...\",\n        \"objective\": \"ROM 90° shoulder abduction...\",\n        \"assessment\": \"Muscle tension pattern...\",\n        \"plan\": \"Continue trapezius protocol...\",\n        ...\n    }",
        "operationId": "get_latest_finalized_session_api_v1_sessions_clients__client_id__latest_finalized_get",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Client Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SessionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/{session_id}/attachments": {
      "post": {
        "tags": ["session-attachments"],
        "summary": "Upload Session Attachment",
        "description": "Upload file attachment for a session note.\n\nSecurity features:\n- Triple validation (MIME type, extension, content)\n- EXIF metadata stripping (GPS, camera info)\n- File size limits (10 MB per file, 50 MB total per session)\n- Secure S3 key generation (UUID-based, no user-controlled names)\n- Workspace isolation (verified before upload)\n- Rate limiting (10 uploads per minute per user)\n- Audit logging (automatic via middleware)\n\nSupported file types:\n- Images: JPEG, PNG, WebP (for wound photos, treatment documentation)\n- Documents: PDF (for lab reports, referrals, consent forms)\n\nArgs:\n    session_id: UUID of the session\n    file: Uploaded file (multipart/form-data)\n    request: FastAPI request object (for audit logging)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n    redis_client: Redis client (for rate limiting)\n\nReturns:\n    Created attachment metadata (id, filename, size, content_type, created_at)\n\nRaises:\n    HTTPException:\n        - 401 if not authenticated\n        - 404 if session not found or wrong workspace\n        - 413 if file too large or total attachments exceed limit\n        - 415 if unsupported file type or validation fails\n        - 422 if validation error (MIME mismatch, corrupted file)\n        - 429 if rate limit exceeded (10 uploads/minute)\n\nExample:\n    POST /api/v1/sessions/{uuid}/attachments\n    Content-Type: multipart/form-data\n\n    file: (binary data)",
        "operationId": "upload_session_attachment_api_v1_sessions__session_id__attachments_post",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Session Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_session_attachment_api_v1_sessions__session_id__attachments_post"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SessionAttachmentResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["session-attachments"],
        "summary": "List Session Attachments",
        "description": "List all attachments for a session.\n\nReturns metadata for all attachments (filenames, sizes, types, session date).\nDoes not include file content (use GET /attachments/{id}/download for content).\n\nArgs:\n    session_id: UUID of the session\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    List of attachment metadata with session context\n\nRaises:\n    HTTPException:\n        - 401 if not authenticated\n        - 404 if session not found or wrong workspace\n\nExample:\n    GET /api/v1/sessions/{uuid}/attachments",
        "operationId": "list_session_attachments_api_v1_sessions__session_id__attachments_get",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Session Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionAttachmentListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/{session_id}/attachments/{attachment_id}/download": {
      "get": {
        "tags": ["session-attachments"],
        "summary": "Get Attachment Download Url",
        "description": "Generate pre-signed download URL for attachment.\n\nReturns a temporary pre-signed URL that allows downloading the file from S3.\nURL expires after specified time (default: 15 minutes, max: 60 minutes).\n\nSecurity:\n- URLs expire after 15 minutes by default (configurable, max 60 minutes)\n- Short expiration reduces risk of URL sharing or interception\n- Each download requires re-authentication and workspace verification\n\nArgs:\n    session_id: UUID of the session\n    attachment_id: UUID of the attachment\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n    expires_in_minutes: URL expiration time in minutes (default: 15, max: 60)\n\nReturns:\n    Dict with download_url and expires_at timestamp\n\nRaises:\n    HTTPException:\n        - 401 if not authenticated\n        - 404 if session/attachment not found or wrong workspace\n        - 400 if expires_in_minutes exceeds maximum (60)\n\nExample:\n    GET /api/v1/sessions/{uuid}/attachments/{uuid}/download?expires_in_minutes=30\n    Response: {\n        \"download_url\": \"https://s3.../file?X-Amz-...\",\n        \"expires_in_seconds\": 1800\n    }",
        "operationId": "get_attachment_download_url_api_v1_sessions__session_id__attachments__attachment_id__download_get",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Session Id" }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Attachment Id" }
          },
          {
            "name": "expires_in_minutes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 15,
              "title": "Expires In Minutes"
            }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Attachment Download Url Api V1 Sessions  Session Id  Attachments  Attachment Id  Download Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/{session_id}/attachments/{attachment_id}": {
      "patch": {
        "tags": ["session-attachments"],
        "summary": "Rename Session Attachment",
        "description": "Rename a session-level attachment file.\n\nThe file extension is automatically preserved. Invalid characters\n(/ \\ : * ? \" < > |) are rejected. Duplicate filenames return 409 Conflict.\n\nValidation:\n- Filename length: 1-255 characters (after trimming whitespace)\n- Prohibited characters: / \\ : * ? \" < > |\n- Extension preservation: Original extension automatically appended\n- Duplicate detection: Returns 409 if filename exists for same client\n- Whitespace trimming: Leading/trailing spaces removed\n\nSecurity:\n- Requires workspace access to the session's client\n- Validates attachment belongs to specified session\n- Audit logs all rename operations\n\nArgs:\n    session_id: UUID of the session\n    attachment_id: UUID of the attachment to rename\n    rename_data: New filename (extension will be preserved)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Updated attachment metadata with new filename and updated timestamp\n\nRaises:\n    HTTPException:\n        - 400 if filename is invalid (empty, too long, invalid chars)\n        - 403 if workspace access denied\n        - 404 if session or attachment not found\n        - 409 if duplicate filename exists\n\nExample:\n    PATCH /api/v1/sessions/{uuid}/attachments/{uuid}\n    {\n        \"file_name\": \"Left shoulder pain - Oct 2025\"\n    }",
        "operationId": "rename_session_attachment_api_v1_sessions__session_id__attachments__attachment_id__patch",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Session Id" }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Attachment Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AttachmentRenameRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SessionAttachmentResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["session-attachments"],
        "summary": "Delete Session Attachment",
        "description": "Soft delete a session attachment.\n\nMarks attachment as deleted (soft delete) without removing from S3.\nS3 cleanup happens via background job for deleted attachments.\n\nArgs:\n    session_id: UUID of the session\n    attachment_id: UUID of the attachment\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    No content (204) on success\n\nRaises:\n    HTTPException:\n        - 401 if not authenticated\n        - 404 if session/attachment not found or wrong workspace\n\nExample:\n    DELETE /api/v1/sessions/{uuid}/attachments/{uuid}",
        "operationId": "delete_session_attachment_api_v1_sessions__session_id__attachments__attachment_id__delete",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Session Id" }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Attachment Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients/{client_id}/attachments": {
      "post": {
        "tags": ["client-attachments"],
        "summary": "Upload Client Attachment",
        "description": "Upload file attachment for a client (not tied to specific session).\n\nThis endpoint is for client-level documents like intake forms, consent documents,\ninsurance cards, or baseline assessments that aren't specific to a session.\n\nSecurity features:\n- Triple validation (MIME type, extension, content)\n- EXIF metadata stripping (GPS, camera info)\n- File size limits (10 MB per file, 100 MB total per client)\n- Secure S3 key generation (UUID-based, no user-controlled names)\n- Workspace isolation (verified before upload)\n- Rate limiting (10 uploads per minute per user)\n- Audit logging (automatic via middleware)\n\nSupported file types:\n- Images: JPEG, PNG, WebP (for baseline photos, insurance cards)\n- Documents: PDF (for intake forms, consent documents, referrals)\n\nArgs:\n    client_id: UUID of the client\n    file: Uploaded file (multipart/form-data)\n    request: FastAPI request object (for audit logging)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n    redis_client: Redis client (for rate limiting)\n\nReturns:\n    Created attachment metadata (id, filename, size, content_type, created_at)\n\nRaises:\n    HTTPException:\n        - 401 if not authenticated\n        - 404 if client not found or wrong workspace\n        - 413 if file too large or total attachments exceed limit\n        - 415 if unsupported file type or validation fails\n        - 422 if validation error (MIME mismatch, corrupted file)\n        - 429 if rate limit exceeded (10 uploads/minute)\n\nExample:\n    POST /api/v1/clients/{uuid}/attachments\n    Content-Type: multipart/form-data\n\n    file: (binary data)",
        "operationId": "upload_client_attachment_api_v1_clients__client_id__attachments_post",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Client Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_client_attachment_api_v1_clients__client_id__attachments_post"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SessionAttachmentResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["client-attachments"],
        "summary": "List Client Attachments",
        "description": "List all attachments for a client across all sessions.\n\nReturns metadata for all attachments (filenames, sizes, types, session dates).\nIncludes both session-level and client-level attachments.\nDoes not include file content (use GET /attachments/{id}/download for content).\n\nArgs:\n    client_id: UUID of the client\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    List of attachment metadata with session context where applicable\n\nRaises:\n    HTTPException:\n        - 401 if not authenticated\n        - 404 if client not found or wrong workspace\n\nExample:\n    GET /api/v1/clients/{uuid}/attachments\n    Response: {\n        \"items\": [\n            {\n                \"id\": \"uuid\",\n                \"session_id\": \"uuid\",\n                \"client_id\": \"uuid\",\n                \"file_name\": \"wound_photo.jpg\",\n                \"file_type\": \"image/jpeg\",\n                \"file_size_bytes\": 123456,\n                \"created_at\": \"2025-10-15T14:30:00Z\",\n                \"session_date\": \"2025-10-15T13:00:00Z\",\n                \"is_session_file\": true\n            },\n            {\n                \"id\": \"uuid\",\n                \"session_id\": null,\n                \"client_id\": \"uuid\",\n                \"file_name\": \"intake_form.pdf\",\n                \"file_type\": \"application/pdf\",\n                \"file_size_bytes\": 234567,\n                \"created_at\": \"2025-10-01T10:00:00Z\",\n                \"session_date\": null,\n                \"is_session_file\": false\n            }\n        ],\n        \"total\": 2\n    }",
        "operationId": "list_client_attachments_api_v1_clients__client_id__attachments_get",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Client Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionAttachmentListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients/{client_id}/attachments/{attachment_id}/download": {
      "get": {
        "tags": ["client-attachments"],
        "summary": "Get Client Attachment Download Url",
        "description": "Generate pre-signed download URL for client-level attachment.\n\nReturns a temporary pre-signed URL that allows downloading the file from S3.\nURL expires after specified time (default: 15 minutes, max: 60 minutes).\n\nSecurity:\n- URLs expire after 15 minutes by default (configurable, max 60 minutes)\n- Short expiration reduces risk of URL sharing or interception\n- Each download requires re-authentication and workspace verification\n- Workspace isolation enforced\n\nArgs:\n    client_id: UUID of the client\n    attachment_id: UUID of the attachment\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n    expires_in_minutes: URL expiration time in minutes (default: 15, max: 60)\n\nReturns:\n    Dict with download_url and expires_in_seconds\n\nRaises:\n    HTTPException:\n        - 401 if not authenticated\n        - 404 if client/attachment not found or wrong workspace\n        - 400 if expires_in_minutes exceeds maximum (60)\n\nExample:\n    GET /api/v1/clients/{uuid}/attachments/{uuid}/download?expires_in_minutes=30\n    Response: {\n        \"download_url\": \"https://s3.../file?X-Amz-...\",\n        \"expires_in_seconds\": 1800\n    }",
        "operationId": "get_client_attachment_download_url_api_v1_clients__client_id__attachments__attachment_id__download_get",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Client Id" }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Attachment Id" }
          },
          {
            "name": "expires_in_minutes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 15,
              "title": "Expires In Minutes"
            }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Client Attachment Download Url Api V1 Clients  Client Id  Attachments  Attachment Id  Download Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients/{client_id}/attachments/{attachment_id}": {
      "patch": {
        "tags": ["client-attachments"],
        "summary": "Rename Client Attachment",
        "description": "Rename a client-level attachment file.\n\nThe file extension is automatically preserved. Invalid characters\n(/ \\ : * ? \" < > |) are rejected. Duplicate filenames return 409 Conflict.\n\nValidation:\n- Filename length: 1-255 characters (after trimming whitespace)\n- Prohibited characters: / \\ : * ? \" < > |\n- Extension preservation: Original extension automatically appended\n- Duplicate detection: Returns 409 if filename exists for same client\n- Whitespace trimming: Leading/trailing spaces removed\n\nSecurity:\n- Requires workspace access to the client\n- Validates attachment belongs to specified client\n- Validates attachment is client-level (session_id is NULL)\n- Audit logs all rename operations\n\nArgs:\n    client_id: UUID of the client\n    attachment_id: UUID of the attachment to rename\n    rename_data: New filename (extension will be preserved)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Updated attachment metadata with new filename\n\nRaises:\n    HTTPException:\n        - 400 if filename is invalid (empty, too long, invalid chars)\n        - 403 if workspace access denied\n        - 404 if client or attachment not found\n        - 409 if duplicate filename exists\n\nExample:\n    PATCH /api/v1/clients/{uuid}/attachments/{uuid}\n    {\n        \"file_name\": \"Intake form - signed\"\n    }",
        "operationId": "rename_client_attachment_api_v1_clients__client_id__attachments__attachment_id__patch",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Client Id" }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Attachment Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AttachmentRenameRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SessionAttachmentResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["client-attachments"],
        "summary": "Delete Client Attachment",
        "description": "Soft delete a client-level attachment.\n\nMarks attachment as deleted (soft delete) without removing from S3.\nS3 cleanup happens via background job for deleted attachments.\n\nArgs:\n    client_id: UUID of the client\n    attachment_id: UUID of the attachment\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    No content (204) on success\n\nRaises:\n    HTTPException:\n        - 401 if not authenticated\n        - 404 if client/attachment not found or wrong workspace\n\nExample:\n    DELETE /api/v1/clients/{uuid}/attachments/{uuid}",
        "operationId": "delete_client_attachment_api_v1_clients__client_id__attachments__attachment_id__delete",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Client Id" }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Attachment Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients/{client_id}/attachments/download-multiple": {
      "post": {
        "tags": ["client-attachments"],
        "summary": "Download Multiple Attachments",
        "description": "Download multiple attachments as a ZIP file.\n\nCreates a ZIP archive containing all requested attachments and returns it\nto the client. All attachments must belong to the specified client and\nthe user's workspace.\n\nSecurity:\n- Workspace isolation enforced (all attachments must belong to user's workspace)\n- Client ownership verified (all attachments must belong to specified client)\n- Soft-deleted attachments excluded\n- File size limit: 100 MB total\n- File count limit: 50 files maximum (enforced by schema)\n\nPerformance:\n- In-memory ZIP creation (suitable for 100 MB limit)\n- Single S3 request per file (no batching needed at this scale)\n- Content-Length header for proper download progress\n\nArgs:\n    client_id: UUID of the client\n    request_body: List of attachment IDs to download\n    current_user: Authenticated user\n    db: Database session\n\nReturns:\n    Response with ZIP file content\n\nRaises:\n    HTTPException:\n        - 400 if invalid request (empty list handled by schema)\n        - 403 if workspace access denied\n        - 404 if client or any attachment not found\n        - 413 if total file size exceeds 100 MB\n        - 500 if ZIP creation or S3 download fails\n\nExample:\n    POST /api/v1/clients/{uuid}/attachments/download-multiple\n    {\n        \"attachment_ids\": [\"uuid1\", \"uuid2\", \"uuid3\"]\n    }\n\n    Response:\n    Content-Type: application/zip\n    Content-Disposition: attachment; filename=\"client-files-20251019_143022.zip\"\n    (binary ZIP data)",
        "operationId": "download_multiple_attachments_api_v1_clients__client_id__attachments_download_multiple_post",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Client Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BulkDownloadRequest" }
            }
          }
        },
        "responses": {
          "200": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/services": {
      "post": {
        "tags": ["services"],
        "summary": "Create Service",
        "description": "Create a new service.\n\nCreates a new service record in the authenticated workspace.\nAll service data is scoped to the workspace.\n\nSECURITY: workspace_id is derived from authenticated user's JWT token (server-side).\n\nArgs:\n    service_data: Service creation data (without workspace_id)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Created service with all fields\n\nRaises:\n    HTTPException: 401 if not authenticated, 422 if validation fails,\n        409 if service name already exists in workspace",
        "operationId": "create_service_api_v1_services_post",
        "parameters": [
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ServiceCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["services"],
        "summary": "List Services",
        "description": "List all services in the workspace.\n\nReturns a paginated list of services, ordered by name.\nAll results are scoped to the authenticated workspace.\n\nSECURITY: Only returns services belonging to the authenticated user's\nworkspace (from JWT).\n\nArgs:\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n    page: Page number (1-indexed)\n    page_size: Number of items per page (max 100)\n    is_active: Filter by active status (default: true, None = all)\n\nReturns:\n    Paginated list of services with total count\n\nRaises:\n    HTTPException: 401 if not authenticated",
        "operationId": "list_services_api_v1_services_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number (1-indexed)",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number (1-indexed)"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 50,
              "title": "Page Size"
            },
            "description": "Items per page"
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "description": "Filter by active status (default: true)",
              "default": true,
              "title": "Is Active"
            },
            "description": "Filter by active status (default: true)"
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceListResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/services/{service_id}": {
      "get": {
        "tags": ["services"],
        "summary": "Get Service",
        "description": "Get a single service by ID.\n\nRetrieves a service by ID, ensuring it belongs to the authenticated workspace.\n\nSECURITY: Returns 404 for non-existent services and services in\nother workspaces to prevent information leakage. workspace_id is derived\nfrom JWT token.\n\nArgs:\n    service_id: UUID of the service\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Service details\n\nRaises:\n    HTTPException: 401 if not authenticated, 404 if not found or wrong workspace",
        "operationId": "get_service_api_v1_services__service_id__get",
        "parameters": [
          {
            "name": "service_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Service Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["services"],
        "summary": "Update Service",
        "description": "Update an existing service.\n\nUpdates service fields. Only provided fields are updated.\nService must belong to the authenticated workspace.\n\nSECURITY: Verifies workspace ownership before allowing updates.\nworkspace_id is derived from JWT token (server-side).\n\nArgs:\n    service_id: UUID of the service to update\n    service_data: Fields to update\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Updated service\n\nRaises:\n    HTTPException: 401 if not authenticated, 404 if not found or wrong workspace,\n        409 if name conflicts with existing service, 422 if validation fails",
        "operationId": "update_service_api_v1_services__service_id__put",
        "parameters": [
          {
            "name": "service_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Service Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ServiceUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["services"],
        "summary": "Delete Service",
        "description": "Delete a service.\n\nSoft deletes a service by setting is_active=False if referenced by\nappointments.\nHard deletes if no appointments reference it.\nService must belong to the authenticated workspace.\n\nSECURITY: Verifies workspace ownership before allowing deletion.\nworkspace_id is derived from JWT token (server-side).\n\nArgs:\n    service_id: UUID of the service to delete\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    No content (204) on success\n\nRaises:\n    HTTPException: 401 if not authenticated, 404 if not found or wrong workspace",
        "operationId": "delete_service_api_v1_services__service_id__delete",
        "parameters": [
          {
            "name": "service_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Service Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/locations": {
      "post": {
        "tags": ["locations"],
        "summary": "Create Location",
        "description": "Create a new location.\n\nCreates a new location record in the authenticated workspace.\nAll location data is scoped to the workspace.\n\nSECURITY: workspace_id is derived from authenticated user's JWT token (server-side).\n\nArgs:\n    location_data: Location creation data (without workspace_id)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Created location with all fields\n\nRaises:\n    HTTPException: 401 if not authenticated, 422 if validation fails,\n        409 if location name already exists in workspace",
        "operationId": "create_location_api_v1_locations_post",
        "parameters": [
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LocationCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LocationResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["locations"],
        "summary": "List Locations",
        "description": "List all locations in the workspace.\n\nReturns a paginated list of locations, ordered by name.\nAll results are scoped to the authenticated workspace.\n\nSECURITY: Only returns locations belonging to the authenticated user's\nworkspace (from JWT).\n\nArgs:\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n    page: Page number (1-indexed)\n    page_size: Number of items per page (max 100)\n    is_active: Filter by active status (default: true, None = all)\n    location_type: Filter by location type (clinic, home, online)\n\nReturns:\n    Paginated list of locations with total count\n\nRaises:\n    HTTPException: 401 if not authenticated",
        "operationId": "list_locations_api_v1_locations_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number (1-indexed)",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number (1-indexed)"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 50,
              "title": "Page Size"
            },
            "description": "Items per page"
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "description": "Filter by active status (default: true)",
              "default": true,
              "title": "Is Active"
            },
            "description": "Filter by active status (default: true)"
          },
          {
            "name": "location_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/LocationType" },
                { "type": "null" }
              ],
              "description": "Filter by location type",
              "title": "Location Type"
            },
            "description": "Filter by location type"
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LocationListResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/locations/{location_id}": {
      "get": {
        "tags": ["locations"],
        "summary": "Get Location",
        "description": "Get a single location by ID.\n\nRetrieves a location by ID, ensuring it belongs to the authenticated workspace.\n\nSECURITY: Returns 404 for non-existent locations and locations in\nother workspaces to prevent information leakage. workspace_id is derived\nfrom JWT token.\n\nArgs:\n    location_id: UUID of the location\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Location details\n\nRaises:\n    HTTPException: 401 if not authenticated, 404 if not found or wrong workspace",
        "operationId": "get_location_api_v1_locations__location_id__get",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Location Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LocationResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["locations"],
        "summary": "Update Location",
        "description": "Update an existing location.\n\nUpdates location fields. Only provided fields are updated.\nLocation must belong to the authenticated workspace.\n\nSECURITY: Verifies workspace ownership before allowing updates.\nworkspace_id is derived from JWT token (server-side).\n\nArgs:\n    location_id: UUID of the location to update\n    location_data: Fields to update\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Updated location\n\nRaises:\n    HTTPException: 401 if not authenticated, 404 if not found or wrong workspace,\n        409 if name conflicts with existing location, 422 if validation fails",
        "operationId": "update_location_api_v1_locations__location_id__put",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Location Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LocationUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LocationResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["locations"],
        "summary": "Delete Location",
        "description": "Delete a location.\n\nSoft deletes a location by setting is_active=False if referenced by\nappointments.\nHard deletes if no appointments reference it.\nLocation must belong to the authenticated workspace.\n\nSECURITY: Verifies workspace ownership before allowing deletion.\nworkspace_id is derived from JWT token (server-side).\n\nArgs:\n    location_id: UUID of the location to delete\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    No content (204) on success\n\nRaises:\n    HTTPException: 401 if not authenticated, 404 if not found or wrong workspace",
        "operationId": "delete_location_api_v1_locations__location_id__delete",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Location Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/{workspace_id}/storage": {
      "get": {
        "tags": ["workspaces"],
        "summary": "Get Workspace Storage Usage",
        "description": "Get current workspace storage usage statistics.\n\nReturns detailed storage usage information including:\n- Total bytes used by all files\n- Storage quota (maximum allowed)\n- Remaining storage (can be negative if over quota)\n- Usage percentage\n- Quota exceeded flag\n\nArgs:\n    workspace_id: Workspace UUID\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Storage usage statistics\n\nRaises:\n    HTTPException:\n        - 401 if not authenticated\n        - 403 if workspace_id doesn't match user's workspace\n        - 404 if workspace not found\n\nExample:\n    GET /api/v1/workspaces/{uuid}/storage\n    Response: {\n        \"used_bytes\": 5368709120,\n        \"quota_bytes\": 10737418240,\n        \"remaining_bytes\": 5368709120,\n        \"usage_percentage\": 50.0,\n        \"is_quota_exceeded\": false,\n        \"used_mb\": 5120.0,\n        \"quota_mb\": 10240.0,\n        \"remaining_mb\": 5120.0\n    }",
        "operationId": "get_workspace_storage_usage_api_v1_workspaces__workspace_id__storage_get",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Workspace Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceStorageUsageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/{workspace_id}/storage/quota": {
      "patch": {
        "tags": ["workspaces"],
        "summary": "Update Workspace Storage Quota",
        "description": "Update workspace storage quota (admin only).\n\nThis endpoint allows administrators to increase or decrease the storage quota\nfor a workspace. Useful for:\n- Upgrading workspace to higher tier\n- Temporarily increasing quota for busy practices\n- Reducing quota for inactive workspaces\n\nIMPORTANT: This does NOT delete files if new quota is lower than current usage.\nWorkspace will be over quota until files are deleted.\n\nArgs:\n    workspace_id: Workspace UUID\n    quota_update: New quota in bytes\n    current_user: Authenticated user (must be admin)\n    db: Database session\n\nReturns:\n    Updated storage usage statistics\n\nRaises:\n    HTTPException:\n        - 401 if not authenticated\n        - 403 if not admin or wrong workspace\n        - 404 if workspace not found\n        - 400 if quota_bytes is invalid (zero or negative)\n\nExample:\n    PATCH /api/v1/workspaces/{uuid}/storage/quota\n    {\n        \"quota_bytes\": 21474836480\n    }\n    Response: (same as GET /storage)",
        "operationId": "update_workspace_storage_quota_api_v1_workspaces__workspace_id__storage_quota_patch",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Workspace Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceStorageQuotaUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceStorageUsageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/audit-events": {
      "get": {
        "tags": ["audit"],
        "summary": "List Audit Events",
        "description": "List audit events for the workspace with optional filters.\n\nReturns a paginated list of audit events, ordered by created_at descending.\nAll results are scoped to the authenticated workspace.\n\nSECURITY:\n- Requires JWT authentication\n- Only workspace OWNER can access audit logs (HIPAA compliance requirement)\n- Returns audit events belonging only to authenticated workspace\n\nHIPAA Compliance:\n- Audit events are immutable (enforced by database triggers)\n- All PHI access is logged (Client, Session, PlanOfCare reads)\n- Metadata is sanitized to prevent PII/PHI leakage\n- Access to audit logs is restricted to workspace owners\n\nArgs:\n    page: Page number (1-indexed)\n    page_size: Number of items per page (max 100)\n    user_id: Filter by user who performed action\n    resource_type: Filter by resource type (Client, Session, etc.)\n    resource_id: Filter by specific resource ID\n    action: Filter by action type (CREATE, READ, UPDATE, DELETE)\n    start_date: Filter events on or after this date\n    end_date: Filter events on or before this date\n    phi_only: If True, only show PHI access events (Client/Session/PlanOfCare reads)\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Paginated list of audit events with total count\n\nRaises:\n    HTTPException: 401 if not authenticated, 403 if not owner\n\nExamples:\n    - GET /api/v1/audit-events?page=1&page_size=50\n    - GET /api/v1/audit-events?user_id={uuid}&action=READ\n    - GET /api/v1/audit-events?resource_type=Client&phi_only=true\n    - GET /api/v1/audit-events?start_date=2025-01-01T00:00:00Z\n      &end_date=2025-12-31T23:59:59Z",
        "operationId": "list_audit_events_api_v1_audit_events_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number (1-indexed)",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number (1-indexed)"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 50,
              "title": "Page Size"
            },
            "description": "Items per page"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string", "format": "uuid" }, { "type": "null" }],
              "description": "Filter by user",
              "title": "User Id"
            },
            "description": "Filter by user"
          },
          {
            "name": "resource_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/ResourceType" },
                { "type": "null" }
              ],
              "description": "Filter by resource type",
              "title": "Resource Type"
            },
            "description": "Filter by resource type"
          },
          {
            "name": "resource_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string", "format": "uuid" }, { "type": "null" }],
              "description": "Filter by resource ID",
              "title": "Resource Id"
            },
            "description": "Filter by resource ID"
          },
          {
            "name": "action",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/AuditAction" },
                { "type": "null" }
              ],
              "description": "Filter by action type",
              "title": "Action"
            },
            "description": "Filter by action type"
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "description": "Filter events on or after this date",
              "title": "Start Date"
            },
            "description": "Filter events on or after this date"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "description": "Filter events on or before this date",
              "title": "End Date"
            },
            "description": "Filter events on or before this date"
          },
          {
            "name": "phi_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Filter to only PHI access events",
              "default": false,
              "title": "Phi Only"
            },
            "description": "Filter to only PHI access events"
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuditEventListResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/audit-events/{audit_event_id}": {
      "get": {
        "tags": ["audit"],
        "summary": "Get Audit Event",
        "description": "Get a single audit event by ID.\n\nRetrieves an audit event by ID, ensuring it belongs to the authenticated workspace.\n\nSECURITY:\n- Requires JWT authentication\n- Only workspace OWNER can access audit logs (HIPAA compliance requirement)\n- Returns 404 for both non-existent events and events in other workspaces\n  to prevent information leakage\n\nArgs:\n    audit_event_id: UUID of the audit event\n    current_user: Authenticated user (from JWT token)\n    db: Database session\n\nReturns:\n    Audit event details\n\nRaises:\n    HTTPException: 401 if not authenticated, 403 if not owner,\n                  404 if not found or wrong workspace",
        "operationId": "get_audit_event_api_v1_audit_events__audit_event_id__get",
        "parameters": [
          {
            "name": "audit_event_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Audit Event Id" }
          },
          {
            "name": "access_token",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuditEventResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": ["monitoring"],
        "summary": "Metrics",
        "description": "Prometheus metrics endpoint.\n\nExposes application metrics in Prometheus format for scraping.\n\nMetrics include:\n- audit_events_total: Audit events by resource type, action, workspace\n- audit_failures_total: Audit failures by resource type, action, error\n- audit_latency_seconds: Audit event write latency histogram by action\n\nReturns:\n    Prometheus-formatted metrics text\n\nExample:\n    # HELP audit_events_total Total audit events created\n    # TYPE audit_events_total counter\n    audit_events_total{resource_type=\"Client\",action=\"CREATE\"} 42.0",
        "operationId": "metrics_metrics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Health check endpoint.",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/api/v1/health": {
      "get": {
        "summary": "Api Health Check",
        "description": "API v1 health check endpoint.",
        "operationId": "api_health_check_api_v1_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AppointmentCreate": {
        "properties": {
          "client_id": {
            "type": "string",
            "format": "uuid",
            "title": "Client Id",
            "description": "ID of the client for this appointment"
          },
          "scheduled_start": {
            "type": "string",
            "format": "date-time",
            "title": "Scheduled Start",
            "description": "Start time (timezone-aware UTC)"
          },
          "scheduled_end": {
            "type": "string",
            "format": "date-time",
            "title": "Scheduled End",
            "description": "End time (timezone-aware UTC)"
          },
          "location_type": {
            "$ref": "#/components/schemas/LocationType",
            "description": "Type of location (clinic/home/online)"
          },
          "location_details": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Location Details",
            "description": "Additional location details"
          },
          "notes": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Notes",
            "description": "Therapist notes for the appointment"
          }
        },
        "type": "object",
        "required": ["client_id", "scheduled_start", "scheduled_end", "location_type"],
        "title": "AppointmentCreate",
        "description": "Schema for creating a new appointment.\n\nSECURITY: workspace_id is NOT accepted from client requests.\nIt is automatically injected from the authenticated user's session.\nThis prevents workspace injection vulnerabilities."
      },
      "AppointmentDeleteRequest": {
        "properties": {
          "reason": {
            "anyOf": [{ "type": "string", "maxLength": 500 }, { "type": "null" }],
            "title": "Reason",
            "description": "Optional reason for deletion (logged in audit trail)"
          },
          "session_note_action": {
            "anyOf": [
              { "type": "string", "enum": ["delete", "keep"] },
              { "type": "null" }
            ],
            "title": "Session Note Action",
            "description": "Action to take with session notes attached to this appointment. 'delete' = soft delete the session note with 30-day grace period, 'keep' = leave the session note unchanged (default if not specified). Required if appointment has session notes and you want to delete them."
          },
          "deletion_reason": {
            "anyOf": [{ "type": "string", "maxLength": 500 }, { "type": "null" }],
            "title": "Deletion Reason",
            "description": "Optional reason for deleting the session note (only used if session_note_action='delete'). This is separate from the appointment deletion reason and is stored with the soft-deleted session note."
          }
        },
        "type": "object",
        "title": "AppointmentDeleteRequest",
        "description": "Schema for deleting an appointment with optional reason and session note action."
      },
      "AppointmentListResponse": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/AppointmentResponse" },
            "type": "array",
            "title": "Items"
          },
          "total": { "type": "integer", "title": "Total" },
          "page": { "type": "integer", "title": "Page" },
          "page_size": { "type": "integer", "title": "Page Size" },
          "total_pages": { "type": "integer", "title": "Total Pages" }
        },
        "type": "object",
        "required": ["items", "total", "page", "page_size", "total_pages"],
        "title": "AppointmentListResponse",
        "description": "Schema for paginated appointment list response."
      },
      "AppointmentResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "client_id": { "type": "string", "format": "uuid", "title": "Client Id" },
          "scheduled_start": {
            "type": "string",
            "format": "date-time",
            "title": "Scheduled Start"
          },
          "scheduled_end": {
            "type": "string",
            "format": "date-time",
            "title": "Scheduled End"
          },
          "location_type": { "$ref": "#/components/schemas/LocationType" },
          "location_details": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Location Details"
          },
          "status": { "$ref": "#/components/schemas/AppointmentStatus" },
          "notes": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Notes"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "edited_at": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Edited At",
            "description": "When appointment was last edited (NULL if never edited)"
          },
          "edit_count": {
            "type": "integer",
            "title": "Edit Count",
            "description": "Number of times this appointment has been edited",
            "default": 0
          },
          "client": {
            "anyOf": [
              { "$ref": "#/components/schemas/ClientSummary" },
              { "type": "null" }
            ],
            "description": "Client information (included when requested)"
          }
        },
        "type": "object",
        "required": [
          "id",
          "workspace_id",
          "client_id",
          "scheduled_start",
          "scheduled_end",
          "location_type",
          "location_details",
          "status",
          "notes",
          "created_at",
          "updated_at"
        ],
        "title": "AppointmentResponse",
        "description": "Schema for appointment API responses."
      },
      "AppointmentStatus": {
        "type": "string",
        "enum": ["scheduled", "completed", "cancelled", "no_show"],
        "title": "AppointmentStatus",
        "description": "Status of an appointment."
      },
      "AppointmentUpdate": {
        "properties": {
          "client_id": {
            "anyOf": [{ "type": "string", "format": "uuid" }, { "type": "null" }],
            "title": "Client Id",
            "description": "ID of the client for this appointment"
          },
          "scheduled_start": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Scheduled Start",
            "description": "Start time (timezone-aware UTC)"
          },
          "scheduled_end": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Scheduled End",
            "description": "End time (timezone-aware UTC)"
          },
          "location_type": {
            "anyOf": [
              { "$ref": "#/components/schemas/LocationType" },
              { "type": "null" }
            ],
            "description": "Type of location"
          },
          "location_details": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Location Details",
            "description": "Additional location details"
          },
          "status": {
            "anyOf": [
              { "$ref": "#/components/schemas/AppointmentStatus" },
              { "type": "null" }
            ],
            "description": "Appointment status. Valid transitions: scheduled→completed, scheduled→cancelled, scheduled→no_show, completed→no_show, cancelled→scheduled, no_show→scheduled, no_show→completed. Cannot cancel completed appointments with session notes (delete session first). Cannot revert completed appointments to scheduled."
          },
          "notes": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Notes",
            "description": "Therapist notes"
          }
        },
        "type": "object",
        "title": "AppointmentUpdate",
        "description": "Schema for updating an existing appointment."
      },
      "AttachmentRenameRequest": {
        "properties": {
          "file_name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "File Name",
            "description": "New filename (extension will be preserved automatically)",
            "examples": ["Treatment notes - Oct 2025", "Left shoulder pain"]
          }
        },
        "type": "object",
        "required": ["file_name"],
        "title": "AttachmentRenameRequest",
        "description": "Request schema for renaming an attachment.\n\nThe filename is validated and normalized:\n- Whitespace is trimmed\n- Length must be 1-255 characters\n- Invalid characters are rejected: / \\ : * ? \" < > |\n- File extension is preserved automatically\n- Duplicate filenames are rejected"
      },
      "AuditAction": {
        "type": "string",
        "enum": [
          "CREATE",
          "READ",
          "UPDATE",
          "DELETE",
          "LOGIN",
          "LOGOUT",
          "EXPORT",
          "PRINT",
          "SHARE"
        ],
        "title": "AuditAction",
        "description": "Audit action types."
      },
      "AuditEventListResponse": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/AuditEventResponse" },
            "type": "array",
            "title": "Items",
            "description": "List of audit events"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of audit events matching filters"
          },
          "page": {
            "type": "integer",
            "title": "Page",
            "description": "Current page number (1-indexed)"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size",
            "description": "Number of items per page"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages",
            "description": "Total number of pages"
          }
        },
        "type": "object",
        "required": ["items", "total", "page", "page_size", "total_pages"],
        "title": "AuditEventListResponse",
        "description": "Paginated response for audit event list."
      },
      "AuditEventResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier for the audit event"
          },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id",
            "description": "Workspace this event belongs to"
          },
          "user_id": {
            "anyOf": [{ "type": "string", "format": "uuid" }, { "type": "null" }],
            "title": "User Id",
            "description": "User who performed the action (None for system events)"
          },
          "event_type": {
            "type": "string",
            "title": "Event Type",
            "description": "Event type (e.g., 'client.read', 'session.create')"
          },
          "resource_type": {
            "type": "string",
            "title": "Resource Type",
            "description": "Type of resource (Client, Session, Appointment, etc.)"
          },
          "resource_id": {
            "anyOf": [{ "type": "string", "format": "uuid" }, { "type": "null" }],
            "title": "Resource Id",
            "description": "ID of the resource being accessed or modified"
          },
          "action": {
            "$ref": "#/components/schemas/AuditAction",
            "description": "Action performed (CREATE, READ, UPDATE, DELETE, etc.)"
          },
          "ip_address": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Ip Address",
            "description": "IP address of the user"
          },
          "user_agent": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "User Agent",
            "description": "User agent string from the request"
          },
          "metadata": {
            "anyOf": [
              { "additionalProperties": true, "type": "object" },
              { "type": "null" }
            ],
            "title": "Metadata",
            "description": "Additional context (NO PII/PHI)"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "When the event occurred"
          }
        },
        "type": "object",
        "required": [
          "id",
          "workspace_id",
          "user_id",
          "event_type",
          "resource_type",
          "resource_id",
          "action",
          "ip_address",
          "user_agent",
          "metadata",
          "created_at"
        ],
        "title": "AuditEventResponse",
        "description": "Response schema for a single audit event."
      },
      "Body_upload_client_attachment_api_v1_clients__client_id__attachments_post": {
        "properties": {
          "file": { "type": "string", "format": "binary", "title": "File" }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_client_attachment_api_v1_clients__client_id__attachments_post"
      },
      "Body_upload_session_attachment_api_v1_sessions__session_id__attachments_post": {
        "properties": {
          "file": { "type": "string", "format": "binary", "title": "File" }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_session_attachment_api_v1_sessions__session_id__attachments_post"
      },
      "BulkDownloadRequest": {
        "properties": {
          "attachment_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "maxItems": 50,
            "minItems": 1,
            "title": "Attachment Ids",
            "description": "List of attachment UUIDs to download (1-50 files)",
            "examples": [
              [
                "12345678-1234-5678-1234-567812345678",
                "87654321-4321-8765-4321-876543218765"
              ]
            ]
          }
        },
        "type": "object",
        "required": ["attachment_ids"],
        "title": "BulkDownloadRequest",
        "description": "Request schema for bulk downloading multiple attachments as a ZIP file.\n\nValidation:\n- At least 1 attachment ID required\n- Maximum 50 attachments per request (prevents abuse)\n- All attachment IDs must be valid UUIDs\n\nSecurity:\n- All attachments must belong to the specified client\n- All attachments must belong to user's workspace\n- Total file size limited to 100 MB"
      },
      "ClientCreate": {
        "properties": {
          "first_name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "First Name",
            "description": "Client's first name"
          },
          "last_name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Last Name",
            "description": "Client's last name"
          },
          "email": {
            "anyOf": [{ "type": "string", "format": "email" }, { "type": "null" }],
            "title": "Email",
            "description": "Client's email address"
          },
          "phone": {
            "anyOf": [{ "type": "string", "maxLength": 50 }, { "type": "null" }],
            "title": "Phone",
            "description": "Client's phone number"
          },
          "date_of_birth": {
            "anyOf": [{ "type": "string", "format": "date" }, { "type": "null" }],
            "title": "Date Of Birth",
            "description": "Client's date of birth"
          },
          "address": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address",
            "description": "Client's physical address"
          },
          "medical_history": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Medical History",
            "description": "Relevant medical history and conditions (PHI)"
          },
          "emergency_contact_name": {
            "anyOf": [{ "type": "string", "maxLength": 255 }, { "type": "null" }],
            "title": "Emergency Contact Name",
            "description": "Emergency contact person's name"
          },
          "emergency_contact_phone": {
            "anyOf": [{ "type": "string", "maxLength": 50 }, { "type": "null" }],
            "title": "Emergency Contact Phone",
            "description": "Emergency contact phone number"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Active status (false = archived/soft deleted)",
            "default": true
          },
          "consent_status": {
            "type": "boolean",
            "title": "Consent Status",
            "description": "Client consent to store and process data",
            "default": false
          },
          "notes": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Notes",
            "description": "General notes about the client"
          },
          "tags": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Tags",
            "description": "Tags for categorization and filtering"
          }
        },
        "type": "object",
        "required": ["first_name", "last_name"],
        "title": "ClientCreate",
        "description": "Schema for creating a new client.\n\nSECURITY: workspace_id is NOT accepted from client requests.\nIt is automatically injected from the authenticated user's session.\nThis prevents workspace injection vulnerabilities."
      },
      "ClientListResponse": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/ClientResponse" },
            "type": "array",
            "title": "Items"
          },
          "total": { "type": "integer", "title": "Total" },
          "page": { "type": "integer", "title": "Page" },
          "page_size": { "type": "integer", "title": "Page Size" },
          "total_pages": { "type": "integer", "title": "Total Pages" }
        },
        "type": "object",
        "required": ["items", "total", "page", "page_size", "total_pages"],
        "title": "ClientListResponse",
        "description": "Schema for paginated client list response."
      },
      "ClientResponse": {
        "properties": {
          "first_name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "First Name",
            "description": "Client's first name"
          },
          "last_name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Last Name",
            "description": "Client's last name"
          },
          "email": {
            "anyOf": [{ "type": "string", "format": "email" }, { "type": "null" }],
            "title": "Email",
            "description": "Client's email address"
          },
          "phone": {
            "anyOf": [{ "type": "string", "maxLength": 50 }, { "type": "null" }],
            "title": "Phone",
            "description": "Client's phone number"
          },
          "date_of_birth": {
            "anyOf": [{ "type": "string", "format": "date" }, { "type": "null" }],
            "title": "Date Of Birth",
            "description": "Client's date of birth"
          },
          "address": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address",
            "description": "Client's physical address"
          },
          "medical_history": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Medical History",
            "description": "Relevant medical history and conditions (PHI)"
          },
          "emergency_contact_name": {
            "anyOf": [{ "type": "string", "maxLength": 255 }, { "type": "null" }],
            "title": "Emergency Contact Name",
            "description": "Emergency contact person's name"
          },
          "emergency_contact_phone": {
            "anyOf": [{ "type": "string", "maxLength": 50 }, { "type": "null" }],
            "title": "Emergency Contact Phone",
            "description": "Emergency contact phone number"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Active status (false = archived/soft deleted)",
            "default": true
          },
          "consent_status": {
            "type": "boolean",
            "title": "Consent Status",
            "description": "Client consent to store and process data",
            "default": false
          },
          "notes": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Notes",
            "description": "General notes about the client"
          },
          "tags": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Tags",
            "description": "Tags for categorization and filtering"
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "next_appointment": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Next Appointment",
            "description": "Next scheduled appointment after now"
          },
          "last_appointment": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Last Appointment",
            "description": "Most recent completed appointment"
          },
          "appointment_count": {
            "type": "integer",
            "title": "Appointment Count",
            "description": "Total number of appointments",
            "default": 0
          },
          "full_name": {
            "type": "string",
            "title": "Full Name",
            "description": "Full name of the client.",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "id",
          "workspace_id",
          "created_at",
          "updated_at",
          "full_name"
        ],
        "title": "ClientResponse",
        "description": "Schema for client API responses."
      },
      "ClientSummary": {
        "properties": {
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "first_name": { "type": "string", "title": "First Name" },
          "last_name": { "type": "string", "title": "Last Name" },
          "full_name": { "type": "string", "title": "Full Name" }
        },
        "type": "object",
        "required": ["id", "first_name", "last_name", "full_name"],
        "title": "ClientSummary",
        "description": "Summary of client information for appointment responses."
      },
      "ClientUpdate": {
        "properties": {
          "first_name": {
            "anyOf": [
              { "type": "string", "maxLength": 255, "minLength": 1 },
              { "type": "null" }
            ],
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              { "type": "string", "maxLength": 255, "minLength": 1 },
              { "type": "null" }
            ],
            "title": "Last Name"
          },
          "email": {
            "anyOf": [{ "type": "string", "format": "email" }, { "type": "null" }],
            "title": "Email"
          },
          "phone": {
            "anyOf": [{ "type": "string", "maxLength": 50 }, { "type": "null" }],
            "title": "Phone"
          },
          "date_of_birth": {
            "anyOf": [{ "type": "string", "format": "date" }, { "type": "null" }],
            "title": "Date Of Birth"
          },
          "address": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address"
          },
          "medical_history": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Medical History"
          },
          "emergency_contact_name": {
            "anyOf": [{ "type": "string", "maxLength": 255 }, { "type": "null" }],
            "title": "Emergency Contact Name"
          },
          "emergency_contact_phone": {
            "anyOf": [{ "type": "string", "maxLength": 50 }, { "type": "null" }],
            "title": "Emergency Contact Phone"
          },
          "is_active": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Active"
          },
          "consent_status": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Consent Status"
          },
          "notes": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Notes"
          },
          "tags": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "title": "ClientUpdate",
        "description": "Schema for updating an existing client."
      },
      "ConflictCheckResponse": {
        "properties": {
          "has_conflict": {
            "type": "boolean",
            "title": "Has Conflict",
            "description": "Whether a conflict exists"
          },
          "conflicting_appointments": {
            "items": { "$ref": "#/components/schemas/ConflictingAppointmentDetail" },
            "type": "array",
            "title": "Conflicting Appointments",
            "description": "List of conflicting appointments with privacy-preserving details"
          }
        },
        "type": "object",
        "required": ["has_conflict"],
        "title": "ConflictCheckResponse",
        "description": "Schema for conflict check response."
      },
      "ConflictingAppointmentDetail": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Appointment ID"
          },
          "scheduled_start": {
            "type": "string",
            "format": "date-time",
            "title": "Scheduled Start",
            "description": "Start time"
          },
          "scheduled_end": {
            "type": "string",
            "format": "date-time",
            "title": "Scheduled End",
            "description": "End time"
          },
          "client_initials": {
            "type": "string",
            "title": "Client Initials",
            "description": "Client initials for privacy (e.g., 'J.D.')"
          },
          "location_type": {
            "$ref": "#/components/schemas/LocationType",
            "description": "Location type"
          },
          "status": {
            "$ref": "#/components/schemas/AppointmentStatus",
            "description": "Appointment status"
          }
        },
        "type": "object",
        "required": [
          "id",
          "scheduled_start",
          "scheduled_end",
          "client_initials",
          "location_type",
          "status"
        ],
        "title": "ConflictingAppointmentDetail",
        "description": "Privacy-preserving details of a conflicting appointment."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "InviteTherapistRequest": {
        "properties": {
          "workspace_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Workspace Name",
            "description": "Name of the workspace to create",
            "examples": ["Sarah's Massage Therapy"]
          },
          "therapist_email": {
            "type": "string",
            "format": "email",
            "title": "Therapist Email",
            "description": "Email address of the therapist (must be unique)",
            "examples": ["sarah@example.com"]
          },
          "therapist_full_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Therapist Full Name",
            "description": "Full name of the therapist",
            "examples": ["Sarah Chen"]
          }
        },
        "type": "object",
        "required": ["workspace_name", "therapist_email", "therapist_full_name"],
        "title": "InviteTherapistRequest",
        "description": "Request schema for inviting a therapist.\n\nExample:\n    ```json\n    {\n        \"workspace_name\": \"Sarah's Massage Therapy\",\n        \"therapist_email\": \"sarah@example.com\",\n        \"therapist_full_name\": \"Sarah Chen\"\n    }\n    ```"
      },
      "InviteTherapistResponse": {
        "properties": {
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id",
            "description": "UUID of the created workspace"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id",
            "description": "UUID of the created user (therapist)"
          },
          "invitation_url": {
            "type": "string",
            "title": "Invitation Url",
            "description": "Magic link URL to send to therapist via email",
            "examples": ["https://app.pazpaz.com/accept-invitation?token=abc123..."]
          }
        },
        "type": "object",
        "required": ["workspace_id", "user_id", "invitation_url"],
        "title": "InviteTherapistResponse",
        "description": "Response schema for therapist invitation.\n\nExample:\n    ```json\n    {\n        \"workspace_id\": \"123e4567-e89b-12d3-a456-426614174000\",\n        \"user_id\": \"987e6543-e21b-34c5-b678-123456789012\",\n        \"invitation_url\": \"https://app.pazpaz.com/accept-invitation?token=...\"\n    }\n    ```"
      },
      "LocationCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name",
            "description": "Location name"
          },
          "location_type": {
            "$ref": "#/components/schemas/LocationType",
            "description": "Type: clinic, home, or online"
          },
          "address": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address",
            "description": "Physical address for clinic or home visits"
          },
          "details": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Details",
            "description": "Additional details (room, video link, parking)"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Active locations appear in scheduling UI",
            "default": true
          }
        },
        "type": "object",
        "required": ["name", "location_type"],
        "title": "LocationCreate",
        "description": "Schema for creating a new location.\n\nSECURITY: workspace_id is NOT accepted from client requests.\nIt is automatically injected from the authenticated user's session.\nThis prevents workspace injection vulnerabilities."
      },
      "LocationListResponse": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/LocationResponse" },
            "type": "array",
            "title": "Items"
          },
          "total": { "type": "integer", "title": "Total" },
          "page": { "type": "integer", "title": "Page" },
          "page_size": { "type": "integer", "title": "Page Size" },
          "total_pages": { "type": "integer", "title": "Total Pages" }
        },
        "type": "object",
        "required": ["items", "total", "page", "page_size", "total_pages"],
        "title": "LocationListResponse",
        "description": "Schema for paginated location list response."
      },
      "LocationResponse": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name",
            "description": "Location name"
          },
          "location_type": {
            "$ref": "#/components/schemas/LocationType",
            "description": "Type: clinic, home, or online"
          },
          "address": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address",
            "description": "Physical address for clinic or home visits"
          },
          "details": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Details",
            "description": "Additional details (room, video link, parking)"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Active locations appear in scheduling UI",
            "default": true
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "location_type",
          "id",
          "workspace_id",
          "created_at",
          "updated_at"
        ],
        "title": "LocationResponse",
        "description": "Schema for location API responses."
      },
      "LocationType": {
        "type": "string",
        "enum": ["clinic", "home", "online"],
        "title": "LocationType",
        "description": "Type of location for an appointment."
      },
      "LocationUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              { "type": "string", "maxLength": 255, "minLength": 1 },
              { "type": "null" }
            ],
            "title": "Name"
          },
          "location_type": {
            "anyOf": [
              { "$ref": "#/components/schemas/LocationType" },
              { "type": "null" }
            ]
          },
          "address": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address"
          },
          "details": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Details"
          },
          "is_active": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Active"
          }
        },
        "type": "object",
        "title": "LocationUpdate",
        "description": "Schema for updating an existing location."
      },
      "LogoutResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Success message",
            "default": "Logged out successfully"
          }
        },
        "type": "object",
        "title": "LogoutResponse",
        "description": "Response schema for logout."
      },
      "MagicLink2FARequest": {
        "properties": {
          "temp_token": {
            "type": "string",
            "maxLength": 128,
            "minLength": 32,
            "title": "Temp Token",
            "description": "Temporary token from magic link verification"
          },
          "totp_code": {
            "type": "string",
            "maxLength": 8,
            "minLength": 6,
            "title": "Totp Code",
            "description": "6-digit TOTP code or 8-character backup code",
            "examples": ["123456", "A1B2C3D4"]
          }
        },
        "type": "object",
        "required": ["temp_token", "totp_code"],
        "title": "MagicLink2FARequest",
        "description": "Request to complete authentication with 2FA after magic link."
      },
      "MagicLink2FAResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token",
            "description": "JWT access token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "description": "Token type",
            "default": "bearer"
          },
          "user": {
            "$ref": "#/components/schemas/UserInToken",
            "description": "Authenticated user information"
          }
        },
        "type": "object",
        "required": ["access_token", "user"],
        "title": "MagicLink2FAResponse",
        "description": "Response for 2FA verification after magic link."
      },
      "MagicLinkRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "Email address to send magic link to"
          }
        },
        "type": "object",
        "required": ["email"],
        "title": "MagicLinkRequest",
        "description": "Request schema for magic link generation."
      },
      "MagicLinkResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Success message (generic to prevent email enumeration)",
            "default": "If an account exists with this email, a login link has been sent."
          }
        },
        "type": "object",
        "title": "MagicLinkResponse",
        "description": "Response schema for magic link request."
      },
      "PendingInvitation": {
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id",
            "description": "UUID of the user"
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "Email address of the therapist"
          },
          "full_name": {
            "type": "string",
            "title": "Full Name",
            "description": "Full name of the therapist"
          },
          "workspace_name": {
            "type": "string",
            "title": "Workspace Name",
            "description": "Name of the workspace"
          },
          "invited_at": {
            "type": "string",
            "format": "date-time",
            "title": "Invited At",
            "description": "When invitation was sent (UTC timezone)"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At",
            "description": "When invitation expires (UTC timezone)"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "email",
          "full_name",
          "workspace_name",
          "invited_at",
          "expires_at"
        ],
        "title": "PendingInvitation",
        "description": "Single pending invitation details.\n\nExample:\n    ```json\n    {\n        \"user_id\": \"987e6543-e21b-34c5-b678-123456789012\",\n        \"email\": \"sarah@example.com\",\n        \"full_name\": \"Sarah Chen\",\n        \"workspace_name\": \"Sarah's Massage Therapy\",\n        \"invited_at\": \"2025-10-15T10:30:00Z\",\n        \"expires_at\": \"2025-10-22T10:30:00Z\"\n    }\n    ```"
      },
      "PendingInvitationsResponse": {
        "properties": {
          "invitations": {
            "items": { "$ref": "#/components/schemas/PendingInvitation" },
            "type": "array",
            "title": "Invitations",
            "description": "List of pending invitations (not yet accepted)"
          }
        },
        "type": "object",
        "title": "PendingInvitationsResponse",
        "description": "Response schema for listing pending invitations.\n\nExample:\n    ```json\n    {\n        \"invitations\": [\n            {\n                \"user_id\": \"987e6543-e21b-34c5-b678-123456789012\",\n                \"email\": \"sarah@example.com\",\n                \"full_name\": \"Sarah Chen\",\n                \"workspace_name\": \"Sarah's Massage Therapy\",\n                \"invited_at\": \"2025-10-15T10:30:00Z\",\n                \"expires_at\": \"2025-10-22T10:30:00Z\"\n            }\n        ]\n    }\n    ```"
      },
      "ResendInvitationResponse": {
        "properties": {
          "invitation_url": {
            "type": "string",
            "title": "Invitation Url",
            "description": "New magic link URL to send to therapist via email",
            "examples": ["https://app.pazpaz.com/accept-invitation?token=def456..."]
          }
        },
        "type": "object",
        "required": ["invitation_url"],
        "title": "ResendInvitationResponse",
        "description": "Response schema for resending invitation.\n\nExample:\n    ```json\n    {\n        \"invitation_url\": \"https://app.pazpaz.com/accept-invitation?token=...\"\n    }\n    ```"
      },
      "ResourceType": {
        "type": "string",
        "enum": [
          "User",
          "Client",
          "Appointment",
          "Session",
          "SessionAttachment",
          "PlanOfCare",
          "Service",
          "Location",
          "Workspace"
        ],
        "title": "ResourceType",
        "description": "Resource types that can be audited."
      },
      "ServiceCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name",
            "description": "Service name"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "Optional description of the service"
          },
          "default_duration_minutes": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Default Duration Minutes",
            "description": "Default duration in minutes (must be > 0)"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Active services appear in scheduling UI",
            "default": true
          }
        },
        "type": "object",
        "required": ["name", "default_duration_minutes"],
        "title": "ServiceCreate",
        "description": "Schema for creating a new service.\n\nSECURITY: workspace_id is NOT accepted from client requests.\nIt is automatically injected from the authenticated user's session.\nThis prevents workspace injection vulnerabilities."
      },
      "ServiceListResponse": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/ServiceResponse" },
            "type": "array",
            "title": "Items"
          },
          "total": { "type": "integer", "title": "Total" },
          "page": { "type": "integer", "title": "Page" },
          "page_size": { "type": "integer", "title": "Page Size" },
          "total_pages": { "type": "integer", "title": "Total Pages" }
        },
        "type": "object",
        "required": ["items", "total", "page", "page_size", "total_pages"],
        "title": "ServiceListResponse",
        "description": "Schema for paginated service list response."
      },
      "ServiceResponse": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name",
            "description": "Service name"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "Optional description of the service"
          },
          "default_duration_minutes": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Default Duration Minutes",
            "description": "Default duration in minutes (must be > 0)"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Active services appear in scheduling UI",
            "default": true
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "default_duration_minutes",
          "id",
          "workspace_id",
          "created_at",
          "updated_at"
        ],
        "title": "ServiceResponse",
        "description": "Schema for service API responses."
      },
      "ServiceUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              { "type": "string", "maxLength": 255, "minLength": 1 },
              { "type": "null" }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "default_duration_minutes": {
            "anyOf": [
              { "type": "integer", "exclusiveMinimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Default Duration Minutes"
          },
          "is_active": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Active"
          }
        },
        "type": "object",
        "title": "ServiceUpdate",
        "description": "Schema for updating an existing service."
      },
      "SessionAttachmentListResponse": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/SessionAttachmentResponse" },
            "type": "array",
            "title": "Items",
            "description": "List of attachments"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of attachments"
          }
        },
        "type": "object",
        "required": ["items", "total"],
        "title": "SessionAttachmentListResponse",
        "description": "Response schema for list of session attachments."
      },
      "SessionAttachmentResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Attachment UUID"
          },
          "session_id": {
            "anyOf": [{ "type": "string", "format": "uuid" }, { "type": "null" }],
            "title": "Session Id",
            "description": "Session UUID (None for client-level attachments)"
          },
          "client_id": {
            "type": "string",
            "format": "uuid",
            "title": "Client Id",
            "description": "Client UUID (always present)"
          },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id",
            "description": "Workspace UUID"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "Sanitized filename"
          },
          "file_type": {
            "type": "string",
            "title": "File Type",
            "description": "MIME type (e.g., image/jpeg)"
          },
          "file_size_bytes": {
            "type": "integer",
            "title": "File Size Bytes",
            "description": "File size in bytes"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Upload timestamp"
          },
          "session_date": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Session Date",
            "description": "Date of session (None for client-level attachments)"
          },
          "is_session_file": {
            "type": "boolean",
            "title": "Is Session File",
            "description": "True if attached to specific session, False if client-level"
          }
        },
        "type": "object",
        "required": [
          "id",
          "session_id",
          "client_id",
          "workspace_id",
          "file_name",
          "file_type",
          "file_size_bytes",
          "created_at",
          "is_session_file"
        ],
        "title": "SessionAttachmentResponse",
        "description": "Response schema for session attachment.\n\nReturns metadata about uploaded file (not the file content itself).\nUse GET /attachments/{id}/download to get pre-signed download URL.\n\nSupports both session-level and client-level attachments:\n- Session-level: session_id is set, is_session_file=True\n- Client-level: session_id is None, is_session_file=False"
      },
      "SessionCreate": {
        "properties": {
          "subjective": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Subjective",
            "description": "Patient-reported symptoms (PHI - encrypted at rest)"
          },
          "objective": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Objective",
            "description": "Therapist observations (PHI - encrypted at rest)"
          },
          "assessment": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Assessment",
            "description": "Clinical assessment (PHI - encrypted at rest)"
          },
          "plan": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Plan",
            "description": "Treatment plan (PHI - encrypted at rest)"
          },
          "session_date": {
            "type": "string",
            "format": "date-time",
            "title": "Session Date",
            "description": "Date/time when session occurred (timezone-aware UTC)"
          },
          "duration_minutes": {
            "anyOf": [
              { "type": "integer", "maximum": 480.0, "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Duration Minutes",
            "description": "Session duration in minutes (0-480 min, i.e., 0-8 hours)"
          },
          "client_id": {
            "type": "string",
            "format": "uuid",
            "title": "Client Id",
            "description": "Client ID (must belong to same workspace)"
          },
          "appointment_id": {
            "anyOf": [{ "type": "string", "format": "uuid" }, { "type": "null" }],
            "title": "Appointment Id",
            "description": "Optional appointment link"
          }
        },
        "type": "object",
        "required": ["session_date", "client_id"],
        "title": "SessionCreate",
        "description": "Schema for creating a new session.\n\nSECURITY: workspace_id is NOT accepted from client requests.\nIt is automatically injected from the authenticated user's session.\nThis prevents workspace injection vulnerabilities."
      },
      "SessionDeleteRequest": {
        "properties": {
          "reason": {
            "anyOf": [{ "type": "string", "maxLength": 500 }, { "type": "null" }],
            "title": "Reason",
            "description": "Optional reason for deletion (logged in audit trail)"
          }
        },
        "type": "object",
        "title": "SessionDeleteRequest",
        "description": "Schema for deleting a session with optional reason."
      },
      "SessionDraftUpdate": {
        "properties": {
          "subjective": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Subjective"
          },
          "objective": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Objective"
          },
          "assessment": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Assessment"
          },
          "plan": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Plan"
          },
          "duration_minutes": {
            "anyOf": [
              { "type": "integer", "maximum": 480.0, "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Duration Minutes"
          }
        },
        "type": "object",
        "title": "SessionDraftUpdate",
        "description": "Schema for draft autosave updates (relaxed validation).\n\nUsed by PATCH /sessions/{id}/draft endpoint for frontend autosave.\nAll fields are optional to allow partial updates.\nNo validation on session_date (drafts can be incomplete)."
      },
      "SessionListResponse": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/SessionResponse" },
            "type": "array",
            "title": "Items"
          },
          "total": { "type": "integer", "title": "Total" },
          "page": { "type": "integer", "title": "Page" },
          "page_size": { "type": "integer", "title": "Page Size" },
          "total_pages": { "type": "integer", "title": "Total Pages" }
        },
        "type": "object",
        "required": ["items", "total", "page", "page_size", "total_pages"],
        "title": "SessionListResponse",
        "description": "Schema for paginated session list response."
      },
      "SessionResponse": {
        "properties": {
          "subjective": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Subjective",
            "description": "Patient-reported symptoms (PHI - encrypted at rest)"
          },
          "objective": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Objective",
            "description": "Therapist observations (PHI - encrypted at rest)"
          },
          "assessment": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Assessment",
            "description": "Clinical assessment (PHI - encrypted at rest)"
          },
          "plan": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Plan",
            "description": "Treatment plan (PHI - encrypted at rest)"
          },
          "session_date": {
            "type": "string",
            "format": "date-time",
            "title": "Session Date",
            "description": "Date/time when session occurred (timezone-aware UTC)"
          },
          "duration_minutes": {
            "anyOf": [
              { "type": "integer", "maximum": 480.0, "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Duration Minutes",
            "description": "Session duration in minutes (0-480 min, i.e., 0-8 hours)"
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "client_id": { "type": "string", "format": "uuid", "title": "Client Id" },
          "appointment_id": {
            "anyOf": [{ "type": "string", "format": "uuid" }, { "type": "null" }],
            "title": "Appointment Id"
          },
          "created_by_user_id": {
            "type": "string",
            "format": "uuid",
            "title": "Created By User Id"
          },
          "is_draft": { "type": "boolean", "title": "Is Draft" },
          "draft_last_saved_at": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Draft Last Saved At"
          },
          "finalized_at": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Finalized At"
          },
          "amended_at": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Amended At",
            "description": "When session was last amended (NULL if never amended)"
          },
          "amendment_count": {
            "type": "integer",
            "title": "Amendment Count",
            "description": "Number of times this finalized session has been amended",
            "default": 0
          },
          "version": { "type": "integer", "title": "Version" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Deleted At",
            "description": "When session was soft-deleted (NULL if active)"
          },
          "deleted_reason": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Deleted Reason",
            "description": "Optional reason for soft deletion"
          },
          "deleted_by_user_id": {
            "anyOf": [{ "type": "string", "format": "uuid" }, { "type": "null" }],
            "title": "Deleted By User Id",
            "description": "User who soft-deleted this session"
          },
          "permanent_delete_after": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Permanent Delete After",
            "description": "Date when session will be permanently purged (deleted_at + 30 days)"
          },
          "attachment_count": {
            "type": "integer",
            "title": "Attachment Count",
            "description": "Number of file attachments for this session (excludes deleted)",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "session_date",
          "id",
          "workspace_id",
          "client_id",
          "appointment_id",
          "created_by_user_id",
          "is_draft",
          "draft_last_saved_at",
          "finalized_at",
          "version",
          "created_at",
          "updated_at"
        ],
        "title": "SessionResponse",
        "description": "Schema for session API responses."
      },
      "SessionUpdate": {
        "properties": {
          "subjective": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Subjective"
          },
          "objective": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Objective"
          },
          "assessment": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Assessment"
          },
          "plan": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Plan"
          },
          "session_date": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Session Date"
          },
          "duration_minutes": {
            "anyOf": [
              { "type": "integer", "maximum": 480.0, "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Duration Minutes"
          }
        },
        "type": "object",
        "title": "SessionUpdate",
        "description": "Schema for updating a session (all fields optional for partial updates)."
      },
      "SessionVersionResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "session_id": { "type": "string", "format": "uuid", "title": "Session Id" },
          "version_number": {
            "type": "integer",
            "title": "Version Number",
            "description": "Version number (1 = original, 2+ = amendments)"
          },
          "subjective": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Subjective",
            "description": "Subjective snapshot (decrypted PHI)"
          },
          "objective": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Objective",
            "description": "Objective snapshot (decrypted PHI)"
          },
          "assessment": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Assessment",
            "description": "Assessment snapshot (decrypted PHI)"
          },
          "plan": {
            "anyOf": [{ "type": "string", "maxLength": 5000 }, { "type": "null" }],
            "title": "Plan",
            "description": "Plan snapshot (decrypted PHI)"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "When this version was created (finalized or amended)"
          },
          "created_by_user_id": {
            "type": "string",
            "format": "uuid",
            "title": "Created By User Id",
            "description": "User who created this version"
          }
        },
        "type": "object",
        "required": [
          "id",
          "session_id",
          "version_number",
          "created_at",
          "created_by_user_id"
        ],
        "title": "SessionVersionResponse",
        "description": "Schema for session version history responses.\n\nRepresents a historical snapshot of a session note at a specific point in time."
      },
      "TOTPDisableRequest": {
        "properties": {
          "totp_code": {
            "type": "string",
            "maxLength": 8,
            "minLength": 6,
            "title": "Totp Code",
            "description": "Current 6-digit TOTP code or 8-character backup code",
            "examples": ["123456", "A1B2C3D4"]
          }
        },
        "type": "object",
        "required": ["totp_code"],
        "title": "TOTPDisableRequest",
        "description": "Request to disable TOTP (requires verification).",
        "example": { "totp_code": "123456" }
      },
      "TOTPEnrollResponse": {
        "properties": {
          "secret": {
            "type": "string",
            "title": "Secret",
            "description": "Base32-encoded TOTP secret (store securely in authenticator)"
          },
          "qr_code": {
            "type": "string",
            "title": "Qr Code",
            "description": "Data URI with QR code image (scan with authenticator app)"
          },
          "backup_codes": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Backup Codes",
            "description": "One-time backup codes (save offline, shown only once)",
            "examples": [["A1B2C3D4", "E5F6G7H8", "I9J0K1L2"]]
          }
        },
        "type": "object",
        "required": ["secret", "qr_code", "backup_codes"],
        "title": "TOTPEnrollResponse",
        "description": "Response for TOTP enrollment."
      },
      "TOTPVerifyRequest": {
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 6,
            "minLength": 6,
            "pattern": "^\\d{6}$",
            "title": "Code",
            "description": "6-digit TOTP code from authenticator app",
            "examples": ["123456"]
          }
        },
        "type": "object",
        "required": ["code"],
        "title": "TOTPVerifyRequest",
        "description": "Request to verify TOTP code during enrollment."
      },
      "TOTPVerifyResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether verification succeeded"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Success or error message"
          }
        },
        "type": "object",
        "required": ["success", "message"],
        "title": "TOTPVerifyResponse",
        "description": "Response for TOTP verification."
      },
      "TokenVerifyRequest": {
        "properties": {
          "token": {
            "type": "string",
            "maxLength": 128,
            "minLength": 32,
            "title": "Token",
            "description": "Magic link token from email (384-bit entropy)",
            "examples": ["abc123def456ghi789jkl012mno345pqr678stu901vwx234yz567890ABCD"]
          }
        },
        "type": "object",
        "required": ["token"],
        "title": "TokenVerifyRequest",
        "description": "Request schema for magic link token verification.\n\nSecurity: Token length validation prevents malformed or suspicious tokens.\n- Min 32 chars: Ensures sufficient entropy (minimum 256 bits for URL-safe base64)\n- Max 128 chars: Prevents buffer overflow or DOS attacks via oversized tokens\n- 384-bit tokens: 48 bytes base64url encoded = 64 characters"
      },
      "TokenVerifyResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token",
            "description": "JWT access token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "description": "Token type",
            "default": "bearer"
          },
          "user": {
            "$ref": "#/components/schemas/UserInToken",
            "description": "Authenticated user information"
          }
        },
        "type": "object",
        "required": ["access_token", "user"],
        "title": "TokenVerifyResponse",
        "description": "Response schema for token verification."
      },
      "UserInToken": {
        "properties": {
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "email": { "type": "string", "title": "Email" },
          "full_name": { "type": "string", "title": "Full Name" },
          "role": { "type": "string", "title": "Role" },
          "is_active": { "type": "boolean", "title": "Is Active" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "workspace_id",
          "email",
          "full_name",
          "role",
          "is_active",
          "created_at",
          "updated_at"
        ],
        "title": "UserInToken",
        "description": "User information included in token response."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "WorkspaceStorageQuotaUpdateRequest": {
        "properties": {
          "quota_bytes": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Quota Bytes",
            "description": "New storage quota in bytes (must be positive)"
          }
        },
        "type": "object",
        "required": ["quota_bytes"],
        "title": "WorkspaceStorageQuotaUpdateRequest",
        "description": "Request model for updating workspace storage quota."
      },
      "WorkspaceStorageUsageResponse": {
        "properties": {
          "used_bytes": {
            "type": "integer",
            "title": "Used Bytes",
            "description": "Total bytes used by all files in workspace"
          },
          "quota_bytes": {
            "type": "integer",
            "title": "Quota Bytes",
            "description": "Maximum storage allowed for workspace in bytes"
          },
          "remaining_bytes": {
            "type": "integer",
            "title": "Remaining Bytes",
            "description": "Bytes remaining (can be negative if quota exceeded)"
          },
          "usage_percentage": {
            "type": "number",
            "title": "Usage Percentage",
            "description": "Percentage of quota used (0-100+)"
          },
          "is_quota_exceeded": {
            "type": "boolean",
            "title": "Is Quota Exceeded",
            "description": "True if storage usage exceeds quota"
          },
          "used_mb": {
            "type": "number",
            "title": "Used Mb",
            "description": "Storage used in megabytes"
          },
          "quota_mb": {
            "type": "number",
            "title": "Quota Mb",
            "description": "Quota in megabytes"
          },
          "remaining_mb": {
            "type": "number",
            "title": "Remaining Mb",
            "description": "Remaining storage in megabytes"
          }
        },
        "type": "object",
        "required": [
          "used_bytes",
          "quota_bytes",
          "remaining_bytes",
          "usage_percentage",
          "is_quota_exceeded",
          "used_mb",
          "quota_mb",
          "remaining_mb"
        ],
        "title": "WorkspaceStorageUsageResponse",
        "description": "Response model for workspace storage usage."
      }
    }
  }
}
