services:
  db:
    image: postgres:16-alpine
    container_name: pazpaz-db
    user: root  # Needed to chown files in entrypoint, postgres user set by entrypoint
    environment:
      POSTGRES_USER: pazpaz
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-CHANGE_ME_GENERATE_RANDOM}
      POSTGRES_DB: pazpaz
    entrypoint: ["/docker-entrypoint-db.sh"]
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount SSL certificates from host (development only)
      # Production: Use AWS RDS with built-in SSL certificates
      - ./backend/certs:/tmp/ssl:ro
      # Custom entrypoint for SSL certificate setup
      - ./backend/scripts/docker-entrypoint-db.sh:/docker-entrypoint-db.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pazpaz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  redis:
    image: redis:7-alpine
    container_name: pazpaz-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  mailhog:
    image: mailhog/mailhog:latest
    container_name: pazpaz-mailhog
    platform: linux/amd64  # MailHog doesn't have ARM64 image
    ports:
      - "127.0.0.1:1025:1025"  # SMTP server
      - "127.0.0.1:8025:8025"  # Web UI
    logging:
      driver: none

  minio:
    image: minio/minio:latest
    container_name: pazpaz-minio
    command: server /data --console-address ":9001"
    environment:
      # ===================================================================
      # SECURITY WARNING: Default credentials are for LOCAL DEVELOPMENT ONLY
      # ===================================================================
      # The default values below (minioadmin/minioadmin123) are INSECURE and
      # must NEVER be used in production or any network-accessible environment.
      #
      # BEFORE DEPLOYMENT, generate strong credentials:
      #   export S3_ACCESS_KEY=$(openssl rand -base64 16 | tr -d '/+=' | cut -c1-16)
      #   export S3_SECRET_KEY=$(openssl rand -base64 32 | tr -d '/+=' | cut -c1-32)
      #
      # Add to .env file (gitignored):
      #   S3_ACCESS_KEY=your-secure-username-here
      #   S3_SECRET_KEY=your-secure-password-here
      #
      # Password Requirements:
      #   - Minimum 20 characters (32 recommended)
      #   - Include uppercase, lowercase, numbers, symbols
      #   - Rotate every 90 days (production), 180 days (development)
      #
      # See: docs/backend/storage/S3_CREDENTIAL_MANAGEMENT.md
      # ===================================================================
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-CHANGE_ME_GENERATE_RANDOM}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-CHANGE_ME_GENERATE_RANDOM}

      # ===================================================================
      # MinIO Server-Side Encryption (SSE-S3 with KMS)
      # ===================================================================
      # Enable server-side encryption for all objects stored in MinIO.
      # This ensures PHI (Protected Health Information) file attachments
      # are encrypted at rest, meeting HIPAA compliance requirements.
      #
      # MinIO KMS Configuration:
      # - Uses built-in KMS with secret key (development)
      # - Production should use external KMS (Vault, AWS KMS via gateway)
      #
      # Generate encryption key with:
      #   python -c "import secrets,base64; print(base64.b64encode(secrets.token_bytes(32)).decode())"
      #
      # HIPAA Requirement: ยง164.312(a)(2)(iv) - Encryption at rest
      # ===================================================================
      MINIO_KMS_SECRET_KEY: "pazpaz-minio-key:${MINIO_ENCRYPTION_KEY:-CHANGE_ME_IN_PRODUCTION_32_BYTE_BASE64_KEY}"
    ports:
      - "127.0.0.1:9000:9000"  # S3 API
      - "127.0.0.1:9001:9001"  # MinIO Console (Web UI)
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # ClamAV - Antivirus scanning for file uploads
  # NOTE: ClamAV doesn't support ARM64 (Apple Silicon Macs)
  # For local development on ARM Macs, file scanning will be disabled
  # Production deployments on x86_64 should enable ClamAV
  clamav:
    image: clamav/clamav:latest
    container_name: pazpaz-clamav
    platform: linux/amd64  # Force x86_64 for ARM Macs (slower via emulation)
    ports:
      - "127.0.0.1:3310:3310"
    volumes:
      - clamav_data:/var/lib/clamav
    networks:
      - pazpaz
    healthcheck:
      test: ["CMD", "clamdscan", "--ping", "3"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # ClamAV needs time to download virus definitions
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    profiles:
      - full  # Only start with --profile full

  # Backend API - FastAPI application
  api:
    build: ./backend
    container_name: pazpaz-api
    command: sh -c "uv run --no-sync python -m alembic upgrade head && uv run --no-sync python -m uvicorn pazpaz.main:app --host 0.0.0.0 --port 8000 --reload"
    environment:
      # Database connection
      - DATABASE_URL=postgresql+asyncpg://pazpaz:${POSTGRES_PASSWORD}@db:5432/pazpaz
      - DB_SSL_ENABLED=false
      - DB_SSL_MODE=disable

      # Redis connection
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}

      # S3/MinIO configuration
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-CHANGE_ME_GENERATE_RANDOM}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-CHANGE_ME_GENERATE_RANDOM}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-pazpaz-attachments}
      - S3_REGION=us-east-1

      # ClamAV for file scanning
      - CLAMAV_HOST=clamav
      - CLAMAV_PORT=3310

      # SMTP configuration (MailHog for development)
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - SMTP_USER=
      - SMTP_PASSWORD=
      - EMAILS_FROM_EMAIL=noreply@pazpaz.local

      # Frontend URL for CORS and email links
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:5173}

      # Application settings
      - DEBUG=true
      - ENVIRONMENT=local
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - ENCRYPTION_MASTER_KEY=${ENCRYPTION_MASTER_KEY:-CHANGE_ME_GENERATE_BASE64_32_BYTES}

      # Google Calendar OAuth 2.0 Integration
      - GOOGLE_OAUTH_CLIENT_ID=${GOOGLE_OAUTH_CLIENT_ID}
      - GOOGLE_OAUTH_CLIENT_SECRET=${GOOGLE_OAUTH_CLIENT_SECRET}
      - GOOGLE_OAUTH_REDIRECT_URI=${GOOGLE_OAUTH_REDIRECT_URI:-http://localhost:8000/api/v1/integrations/google-calendar/callback}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      mailhog:
        condition: service_started
      minio:
        condition: service_healthy
    ports:
      - "127.0.0.1:8000:8000"
    volumes:
      # Mount source for hot-reload during development
      - ./backend/src:/app/src:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  # ARQ Worker - Background task scheduler for notifications
  # Runs scheduled tasks: session notes reminders, daily digests, appointment reminders
  # Uses arq (Redis-based task queue) with cron scheduling
  arq-worker:
    build: ./backend
    container_name: pazpaz-arq-worker
    command: sh -c "sleep 10 && uv run --no-sync python -m arq pazpaz.workers.scheduler.WorkerSettings"
    environment:
      # Database connection (must match API service for workspace scoping)
      - DATABASE_URL=postgresql+asyncpg://pazpaz:${POSTGRES_PASSWORD}@db:5432/pazpaz
      - DB_SSL_ENABLED=false
      - DB_SSL_MODE=disable

      # Redis connection (queue backend for arq scheduler)
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}

      # SMTP configuration (use MailHog for development, production SMTP for prod)
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - SMTP_USER=
      - SMTP_PASSWORD=
      - EMAILS_FROM_EMAIL=noreply@pazpaz.local

      # Frontend URL for email links
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:5173}

      # Application settings
      - DEBUG=true
      - ENVIRONMENT=local

      # Encryption key (needed for PHI decryption when building email content)
      - ENCRYPTION_MASTER_KEY=${ENCRYPTION_MASTER_KEY:-CHANGE_ME_GENERATE_BASE64_32_BYTES}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      mailhog:
        condition: service_started
    volumes:
      # Mount source for hot-reload during development
      - ./backend/src:/app/src:ro
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Frontend - Vue 3 + Vite development server
  web:
    image: node:20-alpine
    container_name: pazpaz-frontend
    working_dir: /app
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_API_PROXY_TARGET=http://api:8000
    ports:
      - "127.0.0.1:5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Anonymous volume for node_modules
    depends_on:
      - api
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

volumes:
  postgres_data:
  redis_data:
  minio_data:
  clamav_data:

networks:
  pazpaz:
    driver: bridge