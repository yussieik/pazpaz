services:
  db:
    image: postgres:16-alpine
    container_name: pazpaz-db
    user: root  # Needed to chown files in entrypoint, postgres user set by entrypoint
    environment:
      POSTGRES_USER: pazpaz
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-CHANGE_ME_GENERATE_RANDOM}
      POSTGRES_DB: pazpaz
    entrypoint: ["/docker-entrypoint-db.sh"]
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount SSL certificates from host (development only)
      # Production: Use AWS RDS with built-in SSL certificates
      - ./backend/certs:/tmp/ssl:ro
      # Custom entrypoint for SSL certificate setup
      - ./backend/scripts/docker-entrypoint-db.sh:/docker-entrypoint-db.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pazpaz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: pazpaz-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  mailhog:
    image: mailhog/mailhog:latest
    container_name: pazpaz-mailhog
    ports:
      - "127.0.0.1:1025:1025"  # SMTP server
      - "127.0.0.1:8025:8025"  # Web UI
    logging:
      driver: none

  minio:
    image: minio/minio:latest
    container_name: pazpaz-minio
    command: server /data --console-address ":9001"
    environment:
      # ===================================================================
      # SECURITY WARNING: Default credentials are for LOCAL DEVELOPMENT ONLY
      # ===================================================================
      # The default values below (minioadmin/minioadmin123) are INSECURE and
      # must NEVER be used in production or any network-accessible environment.
      #
      # BEFORE DEPLOYMENT, generate strong credentials:
      #   export S3_ACCESS_KEY=$(openssl rand -base64 16 | tr -d '/+=' | cut -c1-16)
      #   export S3_SECRET_KEY=$(openssl rand -base64 32 | tr -d '/+=' | cut -c1-32)
      #
      # Add to .env file (gitignored):
      #   S3_ACCESS_KEY=your-secure-username-here
      #   S3_SECRET_KEY=your-secure-password-here
      #
      # Password Requirements:
      #   - Minimum 20 characters (32 recommended)
      #   - Include uppercase, lowercase, numbers, symbols
      #   - Rotate every 90 days (production), 180 days (development)
      #
      # See: backend/docs/storage/S3_CREDENTIAL_MANAGEMENT.md
      # ===================================================================
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-CHANGE_ME_GENERATE_RANDOM}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-CHANGE_ME_GENERATE_RANDOM}

      # ===================================================================
      # MinIO Server-Side Encryption (SSE-S3 with KMS)
      # ===================================================================
      # Enable server-side encryption for all objects stored in MinIO.
      # This ensures PHI (Protected Health Information) file attachments
      # are encrypted at rest, meeting HIPAA compliance requirements.
      #
      # MinIO KMS Configuration:
      # - Uses built-in KMS with secret key (development)
      # - Production should use external KMS (Vault, AWS KMS via gateway)
      #
      # Generate encryption key with:
      #   python -c "import secrets,base64; print(base64.b64encode(secrets.token_bytes(32)).decode())"
      #
      # HIPAA Requirement: ยง164.312(a)(2)(iv) - Encryption at rest
      # ===================================================================
      MINIO_KMS_SECRET_KEY: "pazpaz-minio-key:${MINIO_ENCRYPTION_KEY:-CHANGE_ME_IN_PRODUCTION_32_BYTE_BASE64_KEY}"
    ports:
      - "127.0.0.1:9000:9000"  # S3 API
      - "127.0.0.1:9001:9001"  # MinIO Console (Web UI)
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  clamav:
    image: clamav/clamav:latest
    container_name: pazpaz-clamav
    ports:
      - "127.0.0.1:3310:3310"
    volumes:
      - clamav_data:/var/lib/clamav
    networks:
      - pazpaz
    healthcheck:
      test: ["CMD", "clamdscan", "--ping", "3"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # ClamAV needs time to download virus definitions
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:
  clamav_data:

networks:
  pazpaz:
    driver: bridge