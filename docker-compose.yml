services:
  db:
    image: postgres:16-alpine
    container_name: pazpaz-db
    environment:
      POSTGRES_USER: pazpaz
      POSTGRES_PASSWORD: pazpaz
      POSTGRES_DB: pazpaz
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pazpaz"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: pazpaz-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  mailhog:
    image: mailhog/mailhog:latest
    container_name: pazpaz-mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    logging:
      driver: none

  minio:
    image: minio/minio:latest
    container_name: pazpaz-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-minioadmin123}
      # Note: SSE-S3 encryption is enabled per-bucket via API (see create_storage_buckets.py)
      # MINIO_KMS_AUTO_ENCRYPTION requires external KMS setup (not needed for development)
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # MinIO Console (Web UI)
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data: