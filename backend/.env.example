# Application
DEBUG=true
APP_NAME=PazPaz
API_V1_PREFIX=/api/v1
ENVIRONMENT=local

# Database
# SECURITY: In production, database credentials are stored in AWS Secrets Manager
# Local development uses DATABASE_URL environment variable
# Production uses AWS Secrets Manager secret: pazpaz/database-credentials
#
# Local Development: Set DATABASE_URL with your local credentials
DATABASE_URL=postgresql+asyncpg://pazpaz:YOUR_SECURE_PASSWORD_HERE@localhost:5432/pazpaz
#
# Production AWS Secrets Manager Configuration:
# Use AWS CLI or Console to create secret with this JSON format:
# {
#   "username": "pazpaz",
#   "password": "GENERATED_STRONG_PASSWORD",
#   "host": "prod-db.internal",
#   "port": 5432,
#   "database": "pazpaz",
#   "ssl_cert_path": "/etc/ssl/certs/rds-ca-2019-root.pem"
# }
#
# Create secret with AWS CLI:
# aws secretsmanager create-secret \
#   --name pazpaz/database-credentials \
#   --description "PazPaz production database credentials" \
#   --secret-string file://db-credentials.json
#
# Password Requirements:
#   - Minimum 32 characters (64 recommended)
#   - Include uppercase, lowercase, numbers, symbols
#   - No dictionary words or sequential characters
#   - Rotate every 90 days (HIPAA requirement)
#
# Generate strong password:
#   openssl rand -base64 48 | tr -d '/+=' | cut -c1-64
#
# AWS Secrets Manager Secret Name (override if needed):
DB_SECRETS_MANAGER_KEY_NAME=pazpaz/database-credentials

# Database SSL/TLS Configuration (HIPAA requirement)
# CRITICAL: SSL/TLS MUST be enabled in production to encrypt PHI data in transit
#
# SSL Modes (in order of security, highest to lowest):
#   - verify-full: Verify certificate and hostname (production recommended)
#   - verify-ca: Verify certificate only (acceptable for dev/staging)
#   - require: Require encryption but don't verify certificate
#   - prefer: Try SSL, fallback to unencrypted (NOT RECOMMENDED)
#   - allow: Try unencrypted, fallback to SSL (NOT RECOMMENDED)
#   - disable: No encryption (HIPAA VIOLATION - dev only)
#
# Development: Use self-signed certificates (generated via scripts/generate_ssl_certs.sh)
# Production: Use CA-signed certificates (AWS RDS, Let's Encrypt, etc.)
#
DB_SSL_ENABLED=true
DB_SSL_MODE=verify-ca
DB_SSL_CA_CERT_PATH=/Users/yussieik/Desktop/projects/pazpaz/backend/certs/ca-cert.pem
DB_SSL_CLIENT_CERT_PATH=
DB_SSL_CLIENT_KEY_PATH=
#
# Production AWS RDS Example:
#   DB_SSL_ENABLED=true
#   DB_SSL_MODE=verify-full
#   DB_SSL_CA_CERT_PATH=/etc/ssl/certs/rds-ca-2019-root.pem
#   DB_SSL_CLIENT_CERT_PATH=
#   DB_SSL_CLIENT_KEY_PATH=
#
# To generate self-signed certificates for development:
#   ./backend/scripts/generate_ssl_certs.sh
#
# To download AWS RDS CA certificate:
#   wget https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem
#   mv global-bundle.pem /etc/ssl/certs/rds-ca-2019-root.pem

# Redis
# Generate strong password with: openssl rand -base64 32
REDIS_PASSWORD=your-strong-redis-password-here-min-32-chars
REDIS_URL=redis://:${REDIS_PASSWORD}@localhost:6379/0

# Security
SECRET_KEY=change-me-in-production
ACCESS_TOKEN_EXPIRE_MINUTES=10080

# CSRF Protection
CSRF_TOKEN_EXPIRE_MINUTES=10080

# Encryption (local/dev only - use AWS Secrets Manager in production)
# Generate with: python -c 'import secrets,base64; print(base64.b64encode(secrets.token_bytes(32)).decode())'
ENCRYPTION_MASTER_KEY=your-base64-encoded-32-byte-key-here

# AWS Secrets Manager (production only)
AWS_REGION=us-east-1
SECRETS_MANAGER_KEY_NAME=pazpaz/encryption-key-v1

# S3/MinIO Storage
# Development: Use MinIO (localhost:9000)
# Production: Use AWS S3 with https:// endpoint
#
# SECURITY WARNING: Never use default credentials in production!
# Default credentials (minioadmin/minioadmin123) are ONLY acceptable for
# local development on localhost (127.0.0.1). Change immediately if:
# - MinIO is exposed to network (0.0.0.0 or public IP)
# - Deploying to staging or production environments
# - Running on shared development servers
#
# Generate strong credentials with:
#   openssl rand -base64 16 | tr -d '/+=' | cut -c1-16  # Username (16 chars)
#   openssl rand -base64 32 | tr -d '/+=' | cut -c1-32  # Password (32 chars)
#
# Password Requirements:
#   - Minimum 20 characters (32 recommended)
#   - Include uppercase, lowercase, numbers, symbols
#   - No dictionary words or sequential characters
#   - Rotate every 90 days (production), 180 days (development)
#
# See docs/storage/S3_CREDENTIAL_MANAGEMENT.md for full guidance
#
S3_ENDPOINT_URL=http://localhost:9000
S3_ACCESS_KEY=your-secure-username-here  # Min 12 chars, change default!
S3_SECRET_KEY=your-secure-password-here  # Min 20 chars (32 recommended), change default!
S3_BUCKET_NAME=pazpaz-attachments
S3_REGION=us-east-1
#
# Production AWS S3 Configuration:
# For production, use AWS IAM roles (preferred) or AWS Secrets Manager:
# - IAM Roles: Leave S3_ACCESS_KEY and S3_SECRET_KEY empty (boto3 uses role)
# - Secrets Manager: Fetch credentials at runtime (see S3_CREDENTIAL_MANAGEMENT.md)
# - S3_ENDPOINT_URL: Leave empty for AWS S3 (uses default https endpoint)
#
# Production Example (IAM Role):
#   S3_ENDPOINT_URL=
#   S3_ACCESS_KEY=
#   S3_SECRET_KEY=
#   S3_BUCKET_NAME=pazpaz-attachments-prod
#   S3_REGION=us-west-2

# Frontend
FRONTEND_URL=http://localhost:5173

# Email
SMTP_HOST=localhost
SMTP_PORT=1025
SMTP_USER=
SMTP_PASSWORD=
EMAILS_FROM_EMAIL=noreply@pazpaz.local