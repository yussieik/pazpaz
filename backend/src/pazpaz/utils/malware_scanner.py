"""Malware scanning utility using ClamAV.

This module provides malware detection for file uploads using ClamAV antivirus.
All uploaded files are scanned before storage to prevent malware from entering
the PHI storage system.

Security principles:
- Fail closed: Reject uploads in production if scanner unavailable
  (HIPAA requirement)
- Fail open: Allow uploads in development with warning
  (for local development)
- Defense in depth: Malware scanning is ONE layer
  (MIME, extension, content validation also applied)
- Performance: ClamAV scanning adds ~100-500ms latency per file

HIPAA Compliance:
- ยง164.308(a)(5)(ii)(B) - Protection from malicious software
- ยง164.312(a)(2)(iv) - Mechanism to protect PHI from malicious software

ClamAV Configuration:
- Container: clamav/clamav:latest (official image)
- Port: 3310 (clamd daemon)
- Virus definitions: Auto-updated daily
- Test virus: EICAR test file (harmless test string)
"""

from __future__ import annotations

import io

import clamd

from pazpaz.core.config import settings
from pazpaz.core.logging import get_logger

logger = get_logger(__name__)


class MalwareDetectedError(Exception):
    """Raised when malware is detected in file."""

    pass


class ScannerUnavailableError(Exception):
    """Raised when ClamAV service is unavailable."""

    pass


def scan_file_for_malware(file_content: bytes, filename: str) -> None:
    """
    Scan file for malware using ClamAV.

    This function connects to the ClamAV daemon (clamd) and scans the file
    content for known malware signatures. If malware is detected, the upload
    is rejected and the incident is logged for security monitoring.

    Fail-closed behavior (HIPAA requirement):
    - Production/Staging: Reject uploads if scanner unavailable (security first)
    - Development: Allow uploads with warning (for local development convenience)

    Args:
        file_content: File bytes to scan
        filename: Original filename (for logging only, not used for detection)

    Raises:
        MalwareDetectedError: If file contains malware
        ScannerUnavailableError: If ClamAV service is down (production/staging only)

    Example:
        ```python
        try:
            scan_file_for_malware(file_bytes, "document.pdf")
            # File is clean, proceed with upload
        except MalwareDetectedError as e:
            # File contains malware, reject upload
            logger.warning("malware_detected", filename=filename, error=str(e))
            raise HTTPException(status_code=400, detail=str(e))
        except ScannerUnavailableError as e:
            # Scanner down in production, reject upload
            logger.error("scanner_unavailable", error=str(e))
            raise HTTPException(status_code=503, detail=str(e))
        ```

    EICAR Test Virus:
        The EICAR test virus is a harmless test string used to verify malware
        detection without using real malware:
        X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*
    """
    try:
        # Connect to ClamAV daemon
        # In docker-compose, the service is named 'clamav' on port 3310
        clam = clamd.ClamdNetworkSocket(host="clamav", port=3310)

        # Ping ClamAV to verify connection (raises ConnectionError if down)
        if not clam.ping():
            raise clamd.ConnectionError("ClamAV ping failed")

        # Scan file content
        # instream() scans bytes without writing to disk (more secure)
        result = clam.instream(io.BytesIO(file_content))

        # Check scan result
        # result format: {'stream': ('OK', None)}
        # or {'stream': ('FOUND', 'Eicar-Test-Signature')}
        stream_status = result.get("stream")
        if not stream_status:
            raise ValueError("Invalid ClamAV response format")

        scan_result, virus_name = stream_status

        if scan_result == "FOUND":
            # Malware detected - log and reject
            logger.warning(
                "malware_detected",
                filename=filename,
                virus_name=virus_name,
                action="rejected",
                file_size_bytes=len(file_content),
            )
            raise MalwareDetectedError(f"Malware detected: {virus_name}")

        # File is clean
        logger.info(
            "malware_scan_passed",
            filename=filename,
            file_size_bytes=len(file_content),
        )

    except clamd.ConnectionError as e:
        # ClamAV service unavailable
        logger.error(
            "clamav_connection_failed",
            error=str(e),
            error_type=type(e).__name__,
            filename=filename,
        )

        # FAIL CLOSED: Reject file if scanner unavailable in production
        # This prevents malware from entering PHI storage if scanner is down
        if settings.environment in ("production", "staging"):
            raise ScannerUnavailableError(
                "Malware scanner unavailable. Upload rejected for security. "
                "Please try again later or contact support if issue persists."
            ) from e

        # FAIL OPEN: Allow in development (warn only)
        # This enables local development without running ClamAV
        logger.warning(
            "malware_scan_skipped_dev",
            filename=filename,
            reason="ClamAV not available in development mode",
        )

    except MalwareDetectedError:
        # Re-raise malware detection errors
        raise

    except Exception as e:
        # Unexpected error during scanning
        logger.error(
            "malware_scan_error",
            error=str(e),
            error_type=type(e).__name__,
            filename=filename,
        )

        # FAIL CLOSED: Treat unexpected errors as scanner unavailable
        if settings.environment in ("production", "staging"):
            raise ScannerUnavailableError(
                f"Malware scan failed: {type(e).__name__}. "
                "Upload rejected for security."
            ) from e

        # FAIL OPEN: Allow in development with warning
        logger.warning(
            "malware_scan_error_dev",
            filename=filename,
            error=str(e),
            reason="Allowing upload in development mode despite scan error",
        )
