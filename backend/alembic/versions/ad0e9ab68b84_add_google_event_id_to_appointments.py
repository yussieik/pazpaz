"""Add google_event_id to appointments

Revision ID: ad0e9ab68b84
Revises: 75c10af3f2de
Create Date: 2025-10-28 14:56:11.524284

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "ad0e9ab68b84"
down_revision: str | Sequence[str] | None = "75c10af3f2de"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "appointment_reminders_sent",
        "id",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="Primary key",
        existing_nullable=False,
    )
    op.alter_column(
        "appointment_reminders_sent",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="When this record was created",
        existing_nullable=False,
    )
    op.create_index(
        op.f("ix_appointment_reminders_sent_sent_at"),
        "appointment_reminders_sent",
        ["sent_at"],
        unique=False,
    )
    op.add_column(
        "appointments",
        sa.Column(
            "google_event_id",
            sa.String(length=255),
            nullable=True,
            comment="Google Calendar event ID when synced to Google Calendar",
        ),
    )
    op.create_index(
        op.f("ix_appointments_google_event_id"),
        "appointments",
        ["google_event_id"],
        unique=False,
    )
    op.alter_column(
        "google_calendar_tokens",
        "id",
        existing_type=sa.UUID(),
        server_default=None,
        comment=None,
        existing_comment="Unique identifier for the token record",
        existing_nullable=False,
    )
    op.alter_column(
        "google_calendar_tokens",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=None,
        comment=None,
        existing_comment="When token was first stored (OAuth authorization completed)",
        existing_nullable=False,
    )
    op.alter_column(
        "google_calendar_tokens",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=None,
        comment=None,
        existing_comment="When token was last updated (e.g., after token refresh)",
        existing_nullable=False,
    )
    op.alter_column(
        "user_notification_settings",
        "digest_days",
        existing_type=postgresql.ARRAY(sa.INTEGER()),
        comment="Days of week to send digest (0=Sunday, 1=Monday, ..., 6=Saturday)",
        existing_comment="Days of week to send digest (0=Sunday, 6=Saturday)",
        existing_nullable=False,
        existing_server_default=sa.text("'{1,2,3,4,5}'::integer[]"),
    )
    op.drop_index(
        op.f("ix_user_notification_settings_user_id"),
        table_name="user_notification_settings",
    )
    op.create_index(
        op.f("ix_user_notification_settings_user_id"),
        "user_notification_settings",
        ["user_id"],
        unique=True,
    )
    op.create_index(
        op.f("ix_user_notification_settings_workspace_id"),
        "user_notification_settings",
        ["workspace_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_user_notification_settings_workspace_id"),
        table_name="user_notification_settings",
    )
    op.drop_index(
        op.f("ix_user_notification_settings_user_id"),
        table_name="user_notification_settings",
    )
    op.create_index(
        op.f("ix_user_notification_settings_user_id"),
        "user_notification_settings",
        ["user_id"],
        unique=False,
    )
    op.alter_column(
        "user_notification_settings",
        "digest_days",
        existing_type=postgresql.ARRAY(sa.INTEGER()),
        comment="Days of week to send digest (0=Sunday, 6=Saturday)",
        existing_comment="Days of week to send digest (0=Sunday, 1=Monday, ..., 6=Saturday)",
        existing_nullable=False,
        existing_server_default=sa.text("'{1,2,3,4,5}'::integer[]"),
    )
    op.alter_column(
        "google_calendar_tokens",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=sa.text("timezone('utc'::text, now())"),
        comment="When token was last updated (e.g., after token refresh)",
        existing_nullable=False,
    )
    op.alter_column(
        "google_calendar_tokens",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=sa.text("timezone('utc'::text, now())"),
        comment="When token was first stored (OAuth authorization completed)",
        existing_nullable=False,
    )
    op.alter_column(
        "google_calendar_tokens",
        "id",
        existing_type=sa.UUID(),
        server_default=sa.text("gen_random_uuid()"),
        comment="Unique identifier for the token record",
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_appointments_google_event_id"), table_name="appointments")
    op.drop_column("appointments", "google_event_id")
    op.drop_index(
        op.f("ix_appointment_reminders_sent_sent_at"),
        table_name="appointment_reminders_sent",
    )
    op.alter_column(
        "appointment_reminders_sent",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="When this record was created",
        existing_nullable=False,
    )
    op.alter_column(
        "appointment_reminders_sent",
        "id",
        existing_type=sa.UUID(),
        comment="Primary key",
        existing_nullable=False,
    )
    # ### end Alembic commands ###
