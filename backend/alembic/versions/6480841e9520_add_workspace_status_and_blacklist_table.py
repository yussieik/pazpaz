"""add_workspace_status_and_blacklist_table

Revision ID: 6480841e9520
Revises: da1a1442ee90
Create Date: 2025-10-22 13:12:59.085172

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "6480841e9520"
down_revision: str | Sequence[str] | None = "da1a1442ee90"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "email_blacklist",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "email",
            sa.String(length=255),
            nullable=False,
            comment="Email address to blacklist (case-insensitive)",
        ),
        sa.Column(
            "reason",
            sa.Text(),
            nullable=False,
            comment="Reason for blacklisting (required for audit trail)",
        ),
        sa.Column(
            "added_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="When email was added to blacklist (UTC)",
        ),
        sa.Column(
            "added_by",
            sa.Uuid(),
            nullable=True,
            comment="Platform admin who added this entry (NULL if user deleted)",
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["added_by"], ["users.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
        comment="Blacklisted emails that cannot receive invitations or access platform",
    )
    op.create_index(
        "idx_email_blacklist_added_at", "email_blacklist", ["added_at"], unique=False
    )
    op.create_index(
        "idx_email_blacklist_email", "email_blacklist", ["email"], unique=False
    )
    op.create_index(
        op.f("ix_email_blacklist_email"), "email_blacklist", ["email"], unique=True
    )
    op.create_index(
        op.f("ix_email_blacklist_id"), "email_blacklist", ["id"], unique=False
    )
    op.alter_column(
        "appointments",
        "location_id",
        existing_type=sa.UUID(),
        comment="Optional reference to saved location (overrides embedded fields)",
        existing_comment="Optional reference to saved location (overrides location_type/details)",
        existing_nullable=True,
    )
    op.alter_column(
        "appointments",
        "edit_count",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_comment="Number of times this appointment has been edited",
        existing_nullable=False,
    )
    op.alter_column(
        "audit_events",
        "action",
        existing_type=sa.VARCHAR(length=20),
        comment="Action performed (CREATE, READ, UPDATE, DELETE, etc.)",
        existing_comment="Action performed (CREATE, READ, UPDATE, DELETE, LOGIN, LOGOUT, etc.)",
        existing_nullable=False,
    )
    op.alter_column(
        "audit_events",
        "metadata",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment="Additional context (changed_fields, query_params, etc. - NO PII/PHI)",
        existing_comment="Additional event context (changed_fields, query_params, etc. - NO PII/PHI)",
        existing_nullable=True,
    )
    op.create_index(
        op.f("ix_audit_events_action"), "audit_events", ["action"], unique=False
    )
    op.create_index(
        op.f("ix_audit_events_created_at"), "audit_events", ["created_at"], unique=False
    )
    op.create_index(
        op.f("ix_audit_events_event_type"), "audit_events", ["event_type"], unique=False
    )
    op.create_index(
        op.f("ix_audit_events_resource_id"),
        "audit_events",
        ["resource_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_audit_events_resource_type"),
        "audit_events",
        ["resource_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_audit_events_user_id"), "audit_events", ["user_id"], unique=False
    )
    op.create_index(
        op.f("ix_audit_events_workspace_id"),
        "audit_events",
        ["workspace_id"],
        unique=False,
    )
    op.alter_column(
        "clients",
        "first_name",
        existing_type=postgresql.BYTEA(),
        comment="Client first name (encrypted PII)",
        existing_comment="Encrypted first name (AES-256-GCM)",
        existing_nullable=False,
    )
    op.alter_column(
        "clients",
        "last_name",
        existing_type=postgresql.BYTEA(),
        comment="Client last name (encrypted PII)",
        existing_comment="Encrypted last name (AES-256-GCM)",
        existing_nullable=False,
    )
    op.alter_column(
        "clients",
        "email",
        existing_type=postgresql.BYTEA(),
        comment="Client email address (encrypted PII)",
        existing_comment="Encrypted email (AES-256-GCM)",
        existing_nullable=True,
    )
    op.alter_column(
        "clients",
        "phone",
        existing_type=postgresql.BYTEA(),
        comment="Client phone number (encrypted PII)",
        existing_comment="Encrypted phone (AES-256-GCM)",
        existing_nullable=True,
    )
    op.alter_column(
        "clients",
        "date_of_birth",
        existing_type=postgresql.BYTEA(),
        comment="Client date of birth (encrypted PHI, ISO format YYYY-MM-DD)",
        existing_comment="Encrypted date of birth (AES-256-GCM, ISO format YYYY-MM-DD)",
        existing_nullable=True,
    )
    op.alter_column(
        "clients",
        "address",
        existing_type=postgresql.BYTEA(),
        comment="Client physical address (encrypted PII)",
        existing_comment="Encrypted address (AES-256-GCM)",
        existing_nullable=True,
    )
    op.alter_column(
        "clients",
        "medical_history",
        existing_type=postgresql.BYTEA(),
        comment="Relevant medical history and conditions (encrypted PHI)",
        existing_comment="Encrypted medical history (AES-256-GCM)",
        existing_nullable=True,
    )
    op.alter_column(
        "clients",
        "emergency_contact_name",
        existing_type=postgresql.BYTEA(),
        comment="Emergency contact name (encrypted PII)",
        existing_comment="Encrypted emergency contact name (AES-256-GCM)",
        existing_nullable=True,
    )
    op.alter_column(
        "clients",
        "emergency_contact_phone",
        existing_type=postgresql.BYTEA(),
        comment="Emergency contact phone (encrypted PII)",
        existing_comment="Encrypted emergency contact phone (AES-256-GCM)",
        existing_nullable=True,
    )
    op.alter_column(
        "clients",
        "is_active",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_comment="Active status (soft delete flag)",
        existing_nullable=False,
    )
    op.alter_column(
        "session_attachments",
        "id",
        existing_type=sa.UUID(),
        server_default=None,
        comment=None,
        existing_comment="Unique identifier for the attachment",
        existing_nullable=False,
    )
    op.alter_column(
        "session_attachments",
        "workspace_id",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="Workspace scoping (for multi-tenant S3 isolation)",
        existing_nullable=False,
    )
    op.alter_column(
        "session_attachments",
        "file_name",
        existing_type=sa.VARCHAR(length=255),
        type_=sa.Text(),
        comment=None,
        existing_comment="Original filename (sanitized for security)",
        existing_nullable=False,
    )
    op.alter_column(
        "session_attachments",
        "file_type",
        existing_type=sa.VARCHAR(length=100),
        type_=sa.Text(),
        comment=None,
        existing_comment="MIME type (validated: image/jpeg, image/png, image/webp, application/pdf)",
        existing_nullable=False,
    )
    op.alter_column(
        "session_attachments",
        "file_size_bytes",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="File size in bytes (max 10 MB enforced by application)",
        existing_nullable=False,
    )
    op.alter_column(
        "session_attachments",
        "s3_key",
        existing_type=sa.TEXT(),
        comment="S3/MinIO object key - consider encryption in Week 3",
        existing_comment="S3/MinIO object key (workspace-scoped path with encryption)",
        existing_nullable=False,
    )
    op.alter_column(
        "session_attachments",
        "uploaded_by_user_id",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User who uploaded this file (SET NULL to preserve record)",
        existing_nullable=True,
    )
    op.alter_column(
        "session_attachments",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=None,
        comment=None,
        existing_comment="When this file was uploaded",
        existing_nullable=False,
    )
    op.alter_column(
        "session_attachments",
        "deleted_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Soft delete timestamp (NULL = active, NOT NULL = deleted)",
        existing_nullable=True,
    )
    op.drop_index(
        op.f("ix_session_attachments_session"),
        table_name="session_attachments",
        postgresql_where="(deleted_at IS NULL)",
    )
    op.drop_index(
        op.f("ix_session_attachments_workspace"), table_name="session_attachments"
    )
    op.create_index(
        op.f("ix_session_attachments_session_id"),
        "session_attachments",
        ["session_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_session_attachments_workspace_id"),
        "session_attachments",
        ["workspace_id"],
        unique=False,
    )
    op.drop_table_comment(
        "session_attachments",
        existing_comment="File attachments for SOAP notes sessions (S3/MinIO references)",
        schema=None,
    )
    op.alter_column(
        "session_versions",
        "id",
        existing_type=sa.UUID(),
        server_default=None,
        comment=None,
        existing_comment="Unique identifier for the version",
        existing_nullable=False,
    )
    op.alter_column(
        "session_versions",
        "subjective",
        existing_type=postgresql.BYTEA(),
        comment="ENCRYPTED: Subjective (patient-reported symptoms) - AES-256-GCM",
        existing_comment="ENCRYPTED: Subjective snapshot (patient-reported symptoms) - AES-256-GCM",
        existing_nullable=True,
    )
    op.alter_column(
        "session_versions",
        "objective",
        existing_type=postgresql.BYTEA(),
        comment="ENCRYPTED: Objective (therapist observations) - AES-256-GCM",
        existing_comment="ENCRYPTED: Objective snapshot (therapist observations) - AES-256-GCM",
        existing_nullable=True,
    )
    op.alter_column(
        "session_versions",
        "assessment",
        existing_type=postgresql.BYTEA(),
        comment="ENCRYPTED: Assessment (diagnosis/evaluation) - AES-256-GCM",
        existing_comment="ENCRYPTED: Assessment snapshot (diagnosis/evaluation) - AES-256-GCM",
        existing_nullable=True,
    )
    op.alter_column(
        "session_versions",
        "plan",
        existing_type=postgresql.BYTEA(),
        comment="ENCRYPTED: Plan (treatment plan) - AES-256-GCM",
        existing_comment="ENCRYPTED: Plan snapshot (treatment plan) - AES-256-GCM",
        existing_nullable=True,
    )
    op.alter_column(
        "session_versions",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=None,
        existing_comment="When this version was created (finalized or amended)",
        existing_nullable=False,
    )
    op.create_index(
        op.f("ix_session_versions_session_id"),
        "session_versions",
        ["session_id"],
        unique=False,
    )
    op.alter_column(
        "sessions",
        "id",
        existing_type=sa.UUID(),
        server_default=None,
        comment=None,
        existing_comment="Unique identifier for the session",
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "workspace_id",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="Workspace this session belongs to (workspace scoping)",
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "client_id",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="Client this session is for (CASCADE delete with client)",
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "appointment_id",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="Optional link to appointment (SET NULL if appointment deleted)",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "created_by_user_id",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User who created this session (SET NULL to preserve record)",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "deleted_by_user_id",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User who soft-deleted this session (SET NULL to preserve record)",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "subjective",
        existing_type=postgresql.BYTEA(),
        comment="ENCRYPTED: Subjective (patient-reported symptoms) - AES-256-GCM",
        existing_comment="ENCRYPTED: Subjective findings (patient-reported symptoms) - AES-256-GCM",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "objective",
        existing_type=postgresql.BYTEA(),
        comment="ENCRYPTED: Objective (therapist observations) - AES-256-GCM",
        existing_comment="ENCRYPTED: Objective findings (therapist observations) - AES-256-GCM",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "plan",
        existing_type=postgresql.BYTEA(),
        comment="ENCRYPTED: Plan (treatment plan) - AES-256-GCM",
        existing_comment="ENCRYPTED: Plan (treatment plan and next steps) - AES-256-GCM",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "session_date",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Date and time when the session occurred (timezone-aware UTC)",
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "duration_minutes",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Duration of the session in minutes",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "is_draft",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        comment=None,
        existing_comment="Draft status (true = autosave draft, false = finalized)",
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "draft_last_saved_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Timestamp of last autosave (NULL if not a draft)",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "amendment_count",
        existing_type=sa.INTEGER(),
        server_default=None,
        existing_comment="Number of times this finalized session has been amended",
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "version",
        existing_type=sa.INTEGER(),
        server_default=None,
        comment=None,
        existing_comment="Version number for optimistic locking (conflict resolution)",
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=None,
        comment=None,
        existing_comment="When this session was created (immutable)",
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=None,
        comment=None,
        existing_comment="When this session was last updated",
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "deleted_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Soft delete timestamp (NULL = active, NOT NULL = deleted)",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "deleted_reason",
        existing_type=sa.TEXT(),
        comment="Optional reason for soft deletion",
        existing_comment="Optional reason for soft deletion (for audit trail)",
        existing_nullable=True,
    )
    op.create_index(
        op.f("ix_sessions_client_id"), "sessions", ["client_id"], unique=False
    )
    op.create_index(
        op.f("ix_sessions_deleted_at"), "sessions", ["deleted_at"], unique=False
    )
    op.create_index(
        op.f("ix_sessions_is_draft"), "sessions", ["is_draft"], unique=False
    )
    op.create_index(
        op.f("ix_sessions_session_date"), "sessions", ["session_date"], unique=False
    )
    op.create_index(
        op.f("ix_sessions_workspace_id"), "sessions", ["workspace_id"], unique=False
    )
    op.create_table_comment(
        "sessions",
        "SOAP session notes with encrypted PHI fields",
        existing_comment="SOAP notes sessions with encrypted PHI (subjective, objective, assessment, plan)",
        schema=None,
    )
    op.alter_column(
        "users",
        "is_platform_admin",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_comment="True if user can access platform admin panel",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "invited_by_platform_admin",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_comment="True if invited by platform admin (not by another user)",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "totp_enabled",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_comment="Whether 2FA is enabled for this user",
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_users_totp_enabled"), table_name="users")
    # Add status column as nullable first (for existing rows)
    op.add_column(
        "workspaces",
        sa.Column(
            "status",
            sa.Enum(
                "ACTIVE",
                "SUSPENDED",
                "DELETED",
                name="workspacestatus",
                native_enum=False,
                length=50,
            ),
            nullable=True,
            comment="Workspace status (active, suspended, deleted)",
        ),
    )

    # Set default value for existing rows
    op.execute("UPDATE workspaces SET status = 'ACTIVE' WHERE status IS NULL")

    # Now make it NOT NULL
    op.alter_column(
        "workspaces",
        "status",
        nullable=False,
    )

    op.add_column(
        "workspaces",
        sa.Column(
            "deleted_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="When workspace was soft-deleted (NULL if not deleted)",
        ),
    )
    op.drop_index(op.f("ix_workspaces_storage_quota"), table_name="workspaces")
    op.create_index(
        "idx_workspaces_deleted_at", "workspaces", ["deleted_at"], unique=False
    )
    op.create_index("idx_workspaces_status", "workspaces", ["status"], unique=False)
    op.create_table_comment(
        "workspaces",
        "Therapist account context with platform admin management",
        existing_comment="Therapist account context for multi-tenant data isolation",
        schema=None,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_comment(
        "workspaces",
        "Therapist account context for multi-tenant data isolation",
        existing_comment="Therapist account context with platform admin management",
        schema=None,
    )
    op.drop_index("idx_workspaces_status", table_name="workspaces")
    op.drop_index("idx_workspaces_deleted_at", table_name="workspaces")
    op.create_index(
        op.f("ix_workspaces_storage_quota"),
        "workspaces",
        ["storage_used_bytes", "storage_quota_bytes"],
        unique=False,
    )
    op.drop_column("workspaces", "deleted_at")
    op.drop_column("workspaces", "status")
    op.create_index(
        op.f("ix_users_totp_enabled"), "users", ["totp_enabled"], unique=False
    )
    op.alter_column(
        "users",
        "totp_enabled",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        existing_comment="Whether 2FA is enabled for this user",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "invited_by_platform_admin",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        existing_comment="True if invited by platform admin (not by another user)",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "is_platform_admin",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        existing_comment="True if user can access platform admin panel",
        existing_nullable=False,
    )
    op.create_table_comment(
        "sessions",
        "SOAP notes sessions with encrypted PHI (subjective, objective, assessment, plan)",
        existing_comment="SOAP session notes with encrypted PHI fields",
        schema=None,
    )
    op.drop_index(op.f("ix_sessions_workspace_id"), table_name="sessions")
    op.drop_index(op.f("ix_sessions_session_date"), table_name="sessions")
    op.drop_index(op.f("ix_sessions_is_draft"), table_name="sessions")
    op.drop_index(op.f("ix_sessions_deleted_at"), table_name="sessions")
    op.drop_index(op.f("ix_sessions_client_id"), table_name="sessions")
    op.alter_column(
        "sessions",
        "deleted_reason",
        existing_type=sa.TEXT(),
        comment="Optional reason for soft deletion (for audit trail)",
        existing_comment="Optional reason for soft deletion",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "deleted_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Soft delete timestamp (NULL = active, NOT NULL = deleted)",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        comment="When this session was last updated",
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        comment="When this session was created (immutable)",
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "version",
        existing_type=sa.INTEGER(),
        server_default=sa.text("1"),
        comment="Version number for optimistic locking (conflict resolution)",
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "amendment_count",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_comment="Number of times this finalized session has been amended",
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "draft_last_saved_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Timestamp of last autosave (NULL if not a draft)",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "is_draft",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        comment="Draft status (true = autosave draft, false = finalized)",
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "duration_minutes",
        existing_type=sa.INTEGER(),
        comment="Duration of the session in minutes",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "session_date",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Date and time when the session occurred (timezone-aware UTC)",
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "plan",
        existing_type=postgresql.BYTEA(),
        comment="ENCRYPTED: Plan (treatment plan and next steps) - AES-256-GCM",
        existing_comment="ENCRYPTED: Plan (treatment plan) - AES-256-GCM",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "objective",
        existing_type=postgresql.BYTEA(),
        comment="ENCRYPTED: Objective findings (therapist observations) - AES-256-GCM",
        existing_comment="ENCRYPTED: Objective (therapist observations) - AES-256-GCM",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "subjective",
        existing_type=postgresql.BYTEA(),
        comment="ENCRYPTED: Subjective findings (patient-reported symptoms) - AES-256-GCM",
        existing_comment="ENCRYPTED: Subjective (patient-reported symptoms) - AES-256-GCM",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "deleted_by_user_id",
        existing_type=sa.UUID(),
        comment="User who soft-deleted this session (SET NULL to preserve record)",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "created_by_user_id",
        existing_type=sa.UUID(),
        comment="User who created this session (SET NULL to preserve record)",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "appointment_id",
        existing_type=sa.UUID(),
        comment="Optional link to appointment (SET NULL if appointment deleted)",
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "client_id",
        existing_type=sa.UUID(),
        comment="Client this session is for (CASCADE delete with client)",
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "workspace_id",
        existing_type=sa.UUID(),
        comment="Workspace this session belongs to (workspace scoping)",
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "id",
        existing_type=sa.UUID(),
        server_default=sa.text("gen_random_uuid()"),
        comment="Unique identifier for the session",
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_session_versions_session_id"), table_name="session_versions")
    op.alter_column(
        "session_versions",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        existing_comment="When this version was created (finalized or amended)",
        existing_nullable=False,
    )
    op.alter_column(
        "session_versions",
        "plan",
        existing_type=postgresql.BYTEA(),
        comment="ENCRYPTED: Plan snapshot (treatment plan) - AES-256-GCM",
        existing_comment="ENCRYPTED: Plan (treatment plan) - AES-256-GCM",
        existing_nullable=True,
    )
    op.alter_column(
        "session_versions",
        "assessment",
        existing_type=postgresql.BYTEA(),
        comment="ENCRYPTED: Assessment snapshot (diagnosis/evaluation) - AES-256-GCM",
        existing_comment="ENCRYPTED: Assessment (diagnosis/evaluation) - AES-256-GCM",
        existing_nullable=True,
    )
    op.alter_column(
        "session_versions",
        "objective",
        existing_type=postgresql.BYTEA(),
        comment="ENCRYPTED: Objective snapshot (therapist observations) - AES-256-GCM",
        existing_comment="ENCRYPTED: Objective (therapist observations) - AES-256-GCM",
        existing_nullable=True,
    )
    op.alter_column(
        "session_versions",
        "subjective",
        existing_type=postgresql.BYTEA(),
        comment="ENCRYPTED: Subjective snapshot (patient-reported symptoms) - AES-256-GCM",
        existing_comment="ENCRYPTED: Subjective (patient-reported symptoms) - AES-256-GCM",
        existing_nullable=True,
    )
    op.alter_column(
        "session_versions",
        "id",
        existing_type=sa.UUID(),
        server_default=sa.text("gen_random_uuid()"),
        comment="Unique identifier for the version",
        existing_nullable=False,
    )
    op.create_table_comment(
        "session_attachments",
        "File attachments for SOAP notes sessions (S3/MinIO references)",
        existing_comment=None,
        schema=None,
    )
    op.drop_index(
        op.f("ix_session_attachments_workspace_id"), table_name="session_attachments"
    )
    op.drop_index(
        op.f("ix_session_attachments_session_id"), table_name="session_attachments"
    )
    op.create_index(
        op.f("ix_session_attachments_workspace"),
        "session_attachments",
        ["workspace_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_session_attachments_session"),
        "session_attachments",
        ["session_id", sa.literal_column("created_at DESC")],
        unique=False,
        postgresql_where="(deleted_at IS NULL)",
    )
    op.alter_column(
        "session_attachments",
        "deleted_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Soft delete timestamp (NULL = active, NOT NULL = deleted)",
        existing_nullable=True,
    )
    op.alter_column(
        "session_attachments",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        comment="When this file was uploaded",
        existing_nullable=False,
    )
    op.alter_column(
        "session_attachments",
        "uploaded_by_user_id",
        existing_type=sa.UUID(),
        comment="User who uploaded this file (SET NULL to preserve record)",
        existing_nullable=True,
    )
    op.alter_column(
        "session_attachments",
        "s3_key",
        existing_type=sa.TEXT(),
        comment="S3/MinIO object key (workspace-scoped path with encryption)",
        existing_comment="S3/MinIO object key - consider encryption in Week 3",
        existing_nullable=False,
    )
    op.alter_column(
        "session_attachments",
        "file_size_bytes",
        existing_type=sa.INTEGER(),
        comment="File size in bytes (max 10 MB enforced by application)",
        existing_nullable=False,
    )
    op.alter_column(
        "session_attachments",
        "file_type",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(length=100),
        comment="MIME type (validated: image/jpeg, image/png, image/webp, application/pdf)",
        existing_nullable=False,
    )
    op.alter_column(
        "session_attachments",
        "file_name",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(length=255),
        comment="Original filename (sanitized for security)",
        existing_nullable=False,
    )
    op.alter_column(
        "session_attachments",
        "workspace_id",
        existing_type=sa.UUID(),
        comment="Workspace scoping (for multi-tenant S3 isolation)",
        existing_nullable=False,
    )
    op.alter_column(
        "session_attachments",
        "id",
        existing_type=sa.UUID(),
        server_default=sa.text("gen_random_uuid()"),
        comment="Unique identifier for the attachment",
        existing_nullable=False,
    )
    op.alter_column(
        "clients",
        "is_active",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("true"),
        existing_comment="Active status (soft delete flag)",
        existing_nullable=False,
    )
    op.alter_column(
        "clients",
        "emergency_contact_phone",
        existing_type=postgresql.BYTEA(),
        comment="Encrypted emergency contact phone (AES-256-GCM)",
        existing_comment="Emergency contact phone (encrypted PII)",
        existing_nullable=True,
    )
    op.alter_column(
        "clients",
        "emergency_contact_name",
        existing_type=postgresql.BYTEA(),
        comment="Encrypted emergency contact name (AES-256-GCM)",
        existing_comment="Emergency contact name (encrypted PII)",
        existing_nullable=True,
    )
    op.alter_column(
        "clients",
        "medical_history",
        existing_type=postgresql.BYTEA(),
        comment="Encrypted medical history (AES-256-GCM)",
        existing_comment="Relevant medical history and conditions (encrypted PHI)",
        existing_nullable=True,
    )
    op.alter_column(
        "clients",
        "address",
        existing_type=postgresql.BYTEA(),
        comment="Encrypted address (AES-256-GCM)",
        existing_comment="Client physical address (encrypted PII)",
        existing_nullable=True,
    )
    op.alter_column(
        "clients",
        "date_of_birth",
        existing_type=postgresql.BYTEA(),
        comment="Encrypted date of birth (AES-256-GCM, ISO format YYYY-MM-DD)",
        existing_comment="Client date of birth (encrypted PHI, ISO format YYYY-MM-DD)",
        existing_nullable=True,
    )
    op.alter_column(
        "clients",
        "phone",
        existing_type=postgresql.BYTEA(),
        comment="Encrypted phone (AES-256-GCM)",
        existing_comment="Client phone number (encrypted PII)",
        existing_nullable=True,
    )
    op.alter_column(
        "clients",
        "email",
        existing_type=postgresql.BYTEA(),
        comment="Encrypted email (AES-256-GCM)",
        existing_comment="Client email address (encrypted PII)",
        existing_nullable=True,
    )
    op.alter_column(
        "clients",
        "last_name",
        existing_type=postgresql.BYTEA(),
        comment="Encrypted last name (AES-256-GCM)",
        existing_comment="Client last name (encrypted PII)",
        existing_nullable=False,
    )
    op.alter_column(
        "clients",
        "first_name",
        existing_type=postgresql.BYTEA(),
        comment="Encrypted first name (AES-256-GCM)",
        existing_comment="Client first name (encrypted PII)",
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_audit_events_workspace_id"), table_name="audit_events")
    op.drop_index(op.f("ix_audit_events_user_id"), table_name="audit_events")
    op.drop_index(op.f("ix_audit_events_resource_type"), table_name="audit_events")
    op.drop_index(op.f("ix_audit_events_resource_id"), table_name="audit_events")
    op.drop_index(op.f("ix_audit_events_event_type"), table_name="audit_events")
    op.drop_index(op.f("ix_audit_events_created_at"), table_name="audit_events")
    op.drop_index(op.f("ix_audit_events_action"), table_name="audit_events")
    op.alter_column(
        "audit_events",
        "metadata",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment="Additional event context (changed_fields, query_params, etc. - NO PII/PHI)",
        existing_comment="Additional context (changed_fields, query_params, etc. - NO PII/PHI)",
        existing_nullable=True,
    )
    op.alter_column(
        "audit_events",
        "action",
        existing_type=sa.VARCHAR(length=20),
        comment="Action performed (CREATE, READ, UPDATE, DELETE, LOGIN, LOGOUT, etc.)",
        existing_comment="Action performed (CREATE, READ, UPDATE, DELETE, etc.)",
        existing_nullable=False,
    )
    op.alter_column(
        "appointments",
        "edit_count",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        existing_comment="Number of times this appointment has been edited",
        existing_nullable=False,
    )
    op.alter_column(
        "appointments",
        "location_id",
        existing_type=sa.UUID(),
        comment="Optional reference to saved location (overrides location_type/details)",
        existing_comment="Optional reference to saved location (overrides embedded fields)",
        existing_nullable=True,
    )
    op.drop_index(op.f("ix_email_blacklist_id"), table_name="email_blacklist")
    op.drop_index(op.f("ix_email_blacklist_email"), table_name="email_blacklist")
    op.drop_index("idx_email_blacklist_email", table_name="email_blacklist")
    op.drop_index("idx_email_blacklist_added_at", table_name="email_blacklist")
    op.drop_table("email_blacklist")
    # ### end Alembic commands ###
