name: Secret Rotation Reminder

on:
  schedule:
    # Run on the 1st of every month at 9 AM UTC
    - cron: '0 9 1 * *'
  workflow_dispatch:  # Allow manual trigger
    inputs:
      threshold:
        description: 'Warning threshold in days'
        required: false
        default: '30'

jobs:
  check-rotation:
    name: Check Secret Rotation Schedule
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write  # Required to create reminder issues

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Secret Age
        id: check
        run: |
          # Make script executable
          chmod +x ./scripts/check-secret-age.sh

          # Initialize rotation history for CI environment
          echo "# PazPaz Secret Rotation History" > .rotation-history
          echo "# CI Check - $(date +%Y-%m-%d)" >> .rotation-history
          echo "" >> .rotation-history

          # Add dummy dates for CI (will be overridden in production)
          echo "POSTGRES_PASSWORD=$(date -d '60 days ago' +%Y-%m-%d)" >> .rotation-history
          echo "REDIS_PASSWORD=$(date -d '60 days ago' +%Y-%m-%d)" >> .rotation-history
          echo "S3_CREDENTIALS=$(date -d '120 days ago' +%Y-%m-%d)" >> .rotation-history
          echo "JWT_SECRET_KEY=$(date -d '60 days ago' +%Y-%m-%d)" >> .rotation-history
          echo "SECRET_KEY=$(date -d '60 days ago' +%Y-%m-%d)" >> .rotation-history
          echo "CSRF_SECRET_KEY=$(date -d '60 days ago' +%Y-%m-%d)" >> .rotation-history
          echo "SMTP_PASSWORD=$(date -d '120 days ago' +%Y-%m-%d)" >> .rotation-history

          # Run check with custom threshold if provided
          THRESHOLD="${{ github.event.inputs.threshold || '30' }}"
          ./scripts/check-secret-age.sh --threshold $THRESHOLD --report || echo "CHECK_FAILED=true" >> $GITHUB_ENV

      - name: Create Issue if Rotation Needed
        if: env.CHECK_FAILED == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];

            // Check if an issue already exists for this month
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security,secret-rotation',
              state: 'open'
            });

            const existingIssue = issues.data.find(issue =>
              issue.title.includes(date.substring(0, 7)) // Check for YYYY-MM
            );

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üîê Secret Rotation Required - ${date}`,
                body: [
                  '## Secret Rotation Alert',
                  '',
                  'Some secrets are approaching or have exceeded their rotation deadline.',
                  '',
                  '### Action Required',
                  '1. Review the secret rotation status',
                  '2. Run secret rotation for overdue/warning secrets',
                  '3. Update GitHub Secrets after rotation',
                  '4. Verify all services are functioning correctly',
                  '',
                  '### Rotation Commands',
                  '',
                  '**Rotate all secrets:**',
                  '```bash',
                  './scripts/rotate-secrets.sh --all',
                  '```',
                  '',
                  '**Rotate specific secrets:**',
                  '```bash',
                  './scripts/rotate-secrets.sh --postgres',
                  './scripts/rotate-secrets.sh --redis',
                  './scripts/rotate-secrets.sh --s3',
                  './scripts/rotate-secrets.sh --jwt',
                  '```',
                  '',
                  '### Important Notes',
                  '- Always test in staging first',
                  '- Schedule rotation during maintenance window',
                  '- Never rotate ENCRYPTION_MASTER_KEY or MINIO_ENCRYPTION_KEY',
                  '',
                  '### References',
                  '- [Secret Rotation Schedule](docs/deployment/secrets-rotation-schedule.md)',
                  '- [Rotation Script](scripts/rotate-secrets.sh)',
                  '- [Check Secret Age](scripts/check-secret-age.sh)',
                  '',
                  '---',
                  '*This issue was automatically created by the Secret Rotation Reminder workflow.*'
                ].join('\n'),
                labels: ['security', 'secret-rotation', 'operations', 'priority-high']
              });

              console.log('Issue created for secret rotation reminder');
            } else {
              console.log('Issue already exists for this month');
            }

      - name: Post to Slack (if configured)
        if: env.CHECK_FAILED == 'true' && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "‚ö†Ô∏è *PazPaz Secret Rotation Alert*",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*‚ö†Ô∏è Secret Rotation Required*\n\nSome secrets are approaching or have exceeded their rotation deadline."
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Check Date:*\n'$(date +%Y-%m-%d)'"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }'

      - name: Upload Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rotation-compliance-report
          path: |
            .rotation-history
            /opt/pazpaz/logs/rotation-compliance-*.txt
          retention-days: 90