name: Validate GitHub Secrets Configuration
# This workflow validates that all required secrets are properly configured
# Run manually or on a schedule to ensure CI/CD pipeline readiness

on:
  workflow_dispatch:
    inputs:
      verbose:
        description: 'Enable verbose output'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'

jobs:
  validate-secrets:
    name: Validate Required Secrets
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Critical PHI Encryption Secrets
        id: critical
        run: |
          echo "üîí Checking critical HIPAA-required secrets..."
          MISSING=""

          # Most critical - PHI encryption
          if [ -z "${{ secrets.PROD_ENCRYPTION_MASTER_KEY }}" ]; then
            echo "‚ùå PROD_ENCRYPTION_MASTER_KEY is not set (CRITICAL - PHI encryption)"
            MISSING="$MISSING PROD_ENCRYPTION_MASTER_KEY"
          else
            echo "‚úÖ PROD_ENCRYPTION_MASTER_KEY is configured"
          fi

          if [ -n "$MISSING" ]; then
            echo "missing=$MISSING" >> $GITHUB_OUTPUT
            echo "::error::Critical secrets missing: $MISSING"
            exit 1
          fi

      - name: Check Database Secrets
        id: database
        run: |
          echo "üóÑÔ∏è Checking database secrets..."
          MISSING=""

          if [ -z "${{ secrets.PROD_DATABASE_URL }}" ]; then
            echo "‚ùå PROD_DATABASE_URL is not set"
            MISSING="$MISSING PROD_DATABASE_URL"
          else
            echo "‚úÖ PROD_DATABASE_URL is configured"
            # Validate format (without exposing the value)
            if [[ "${{ secrets.PROD_DATABASE_URL }}" =~ ^postgresql ]]; then
              echo "‚úÖ PROD_DATABASE_URL format looks valid"
            else
              echo "‚ö†Ô∏è PROD_DATABASE_URL may have incorrect format"
            fi
          fi

          if [ -z "${{ secrets.PROD_POSTGRES_PASSWORD }}" ]; then
            echo "‚ùå PROD_POSTGRES_PASSWORD is not set"
            MISSING="$MISSING PROD_POSTGRES_PASSWORD"
          else
            echo "‚úÖ PROD_POSTGRES_PASSWORD is configured"
            # Check minimum length (32 characters)
            if [ ${#PROD_POSTGRES_PASSWORD} -ge 32 ] 2>/dev/null; then
              echo "‚úÖ PROD_POSTGRES_PASSWORD meets length requirement"
            fi
          fi

          if [ -n "$MISSING" ]; then
            echo "missing=$MISSING" >> $GITHUB_OUTPUT
            echo "::warning::Database secrets missing: $MISSING"
          fi
        env:
          PROD_POSTGRES_PASSWORD: ${{ secrets.PROD_POSTGRES_PASSWORD }}

      - name: Check SSH Deployment Secrets
        id: ssh
        run: |
          echo "üîë Checking SSH deployment secrets..."
          MISSING=""

          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "‚ùå SSH_PRIVATE_KEY is not set"
            MISSING="$MISSING SSH_PRIVATE_KEY"
          else
            echo "‚úÖ SSH_PRIVATE_KEY is configured"
            # Validate key format
            echo "${{ secrets.SSH_PRIVATE_KEY }}" | head -1 | grep -q "BEGIN" && \
              echo "‚úÖ SSH_PRIVATE_KEY format looks valid" || \
              echo "‚ö†Ô∏è SSH_PRIVATE_KEY may have incorrect format"
          fi

          if [ -z "${{ secrets.SSH_HOST }}" ]; then
            echo "‚ùå SSH_HOST is not set"
            MISSING="$MISSING SSH_HOST"
          else
            echo "‚úÖ SSH_HOST is configured: [hidden]"
          fi

          if [ -z "${{ secrets.SSH_USER }}" ]; then
            echo "‚ùå SSH_USER is not set"
            MISSING="$MISSING SSH_USER"
          else
            echo "‚úÖ SSH_USER is configured: [hidden]"
          fi

          # SSH_PORT is optional, default to 22
          if [ -z "${{ secrets.SSH_PORT }}" ]; then
            echo "‚ÑπÔ∏è SSH_PORT not set (will use default: 22)"
          else
            echo "‚úÖ SSH_PORT is configured: [hidden]"
          fi

          if [ -n "$MISSING" ]; then
            echo "missing=$MISSING" >> $GITHUB_OUTPUT
            echo "::warning::SSH secrets missing: $MISSING"
          fi

      - name: Check Application Secrets
        id: application
        run: |
          echo "üîê Checking application secrets..."
          MISSING=""

          REQUIRED_SECRETS=(
            "PROD_SECRET_KEY"
            "PROD_JWT_SECRET_KEY"
            "PROD_CSRF_SECRET_KEY"
            "PROD_REDIS_PASSWORD"
          )

          for SECRET in "${REQUIRED_SECRETS[@]}"; do
            SECRET_VALUE="SECRETS_$SECRET"
            if [ -z "${!SECRET_VALUE}" ]; then
              echo "‚ùå $SECRET is not set"
              MISSING="$MISSING $SECRET"
            else
              echo "‚úÖ $SECRET is configured"
            fi
          done

          if [ -n "$MISSING" ]; then
            echo "missing=$MISSING" >> $GITHUB_OUTPUT
            echo "::warning::Application secrets missing: $MISSING"
          fi
        env:
          SECRETS_PROD_SECRET_KEY: ${{ secrets.PROD_SECRET_KEY }}
          SECRETS_PROD_JWT_SECRET_KEY: ${{ secrets.PROD_JWT_SECRET_KEY }}
          SECRETS_PROD_CSRF_SECRET_KEY: ${{ secrets.PROD_CSRF_SECRET_KEY }}
          SECRETS_PROD_REDIS_PASSWORD: ${{ secrets.PROD_REDIS_PASSWORD }}

      - name: Check Optional Service Secrets
        id: services
        run: |
          echo "üìß Checking optional service secrets..."

          # MinIO/S3
          if [ -z "${{ secrets.PROD_MINIO_ACCESS_KEY }}" ]; then
            echo "‚ÑπÔ∏è PROD_MINIO_ACCESS_KEY not set (optional)"
          else
            echo "‚úÖ PROD_MINIO_ACCESS_KEY is configured"
          fi

          if [ -z "${{ secrets.PROD_MINIO_SECRET_KEY }}" ]; then
            echo "‚ÑπÔ∏è PROD_MINIO_SECRET_KEY not set (optional)"
          else
            echo "‚úÖ PROD_MINIO_SECRET_KEY is configured"
          fi

          # Email service
          if [ -z "${{ secrets.PROD_RESEND_API_KEY }}" ]; then
            echo "‚ÑπÔ∏è PROD_RESEND_API_KEY not set (optional - email service)"
          else
            echo "‚úÖ PROD_RESEND_API_KEY is configured"
          fi

          # Error tracking
          if [ -z "${{ secrets.PROD_SENTRY_DSN }}" ]; then
            echo "‚ÑπÔ∏è PROD_SENTRY_DSN not set (optional - error tracking)"
          else
            echo "‚úÖ PROD_SENTRY_DSN is configured"
          fi

          # Monitoring
          if [ -z "${{ secrets.UPTIME_ROBOT_API_KEY }}" ]; then
            echo "‚ÑπÔ∏è UPTIME_ROBOT_API_KEY not set (optional - monitoring)"
          else
            echo "‚úÖ UPTIME_ROBOT_API_KEY is configured"
          fi

      - name: Check Container Registry Access
        id: registry
        run: |
          echo "üê≥ Checking container registry access..."

          # GitHub token is always available
          if [ -n "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "‚úÖ GITHUB_TOKEN is available for ghcr.io"
          fi

          # Docker Hub (optional)
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "‚ÑπÔ∏è DOCKER_USERNAME not set (optional - Docker Hub)"
          else
            echo "‚úÖ DOCKER_USERNAME is configured"
          fi

          if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "‚ÑπÔ∏è DOCKER_PASSWORD not set (optional - Docker Hub)"
          else
            echo "‚úÖ DOCKER_PASSWORD is configured"
          fi

      - name: Test SSH Connection
        id: test-ssh
        if: success()
        continue-on-error: true
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            echo "‚úÖ SSH connection successful"
            echo "Hostname: $(hostname)"
            echo "User: $(whoami)"
            echo "Working directory: $(pwd)"

            # Check if deployment directory exists
            if [ -d "/opt/pazpaz" ]; then
              echo "‚úÖ Deployment directory exists: /opt/pazpaz"
            else
              echo "‚ÑπÔ∏è Deployment directory not found: /opt/pazpaz (will be created during first deployment)"
            fi

            # Check Docker installation
            if command -v docker &> /dev/null; then
              echo "‚úÖ Docker is installed: $(docker --version)"
            else
              echo "‚ö†Ô∏è Docker is not installed"
            fi

            # Check Docker Compose
            if command -v docker-compose &> /dev/null; then
              echo "‚úÖ Docker Compose is installed: $(docker-compose --version)"
            elif docker compose version &> /dev/null; then
              echo "‚úÖ Docker Compose (plugin) is installed: $(docker compose version)"
            else
              echo "‚ö†Ô∏è Docker Compose is not installed"
            fi

      - name: Generate Summary Report
        if: always()
        run: |
          echo "## üìã Secrets Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Critical status
          if [ "${{ steps.critical.outcome }}" == "success" ]; then
            echo "### ‚úÖ Critical Secrets: **CONFIGURED**" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Critical Secrets: **MISSING**" >> $GITHUB_STEP_SUMMARY
            echo "Missing: ${{ steps.critical.outputs.missing }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Database status
          echo "### üóÑÔ∏è Database Secrets" >> $GITHUB_STEP_SUMMARY
          if [ -z "${{ steps.database.outputs.missing }}" ]; then
            echo "‚úÖ All database secrets configured" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Missing: ${{ steps.database.outputs.missing }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # SSH status
          echo "### üîë SSH Deployment" >> $GITHUB_STEP_SUMMARY
          if [ -z "${{ steps.ssh.outputs.missing }}" ]; then
            echo "‚úÖ All SSH secrets configured" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Missing: ${{ steps.ssh.outputs.missing }}" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.test-ssh.outcome }}" == "success" ]; then
            echo "‚úÖ SSH connection test: **PASSED**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå SSH connection test: **FAILED**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Application status
          echo "### üîê Application Secrets" >> $GITHUB_STEP_SUMMARY
          if [ -z "${{ steps.application.outputs.missing }}" ]; then
            echo "‚úÖ All application secrets configured" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Missing: ${{ steps.application.outputs.missing }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Timestamp
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**Validated at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

      - name: Final Status Check
        if: always()
        run: |
          # Determine overall status
          if [ "${{ steps.critical.outcome }}" != "success" ]; then
            echo "‚ùå FAILED: Critical secrets are missing"
            exit 1
          elif [ -n "${{ steps.database.outputs.missing }}" ] || \
               [ -n "${{ steps.ssh.outputs.missing }}" ] || \
               [ -n "${{ steps.application.outputs.missing }}" ]; then
            echo "‚ö†Ô∏è WARNING: Some required secrets are missing"
            exit 0  # Don't fail the workflow, just warn
          else
            echo "‚úÖ SUCCESS: All required secrets are configured"
          fi